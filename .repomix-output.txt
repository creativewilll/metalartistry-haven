This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-03-22T17:52:28.007Z

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
public/
  placeholder.svg
src/
  components/
    gallery/
      DetailView.tsx
      FullscreenView.tsx
      GalleryGrid.tsx
    home/
      AboutSection.tsx
      CTASection.tsx
      HeroSection.tsx
      InstagramFeed.tsx
      Testimonials.tsx
    shop/
    ui/
      alert-dialog.tsx
      button.tsx
      card.tsx
      carousel.tsx
      dialog.tsx
      Footer.tsx
      form.tsx
      label.tsx
      Modal.tsx
      pagination.tsx
      PrivacyPolicy.tsx
      separator.tsx
      sheet.tsx
      skeleton.tsx
      sonner.tsx
      switch.tsx
      TermsOfService.tsx
    DynamicRevealSection.tsx
    MetalworkCarousel.tsx
    Navigation.tsx
    PageTransition.tsx
    ScrollIndicator.tsx
  contexts/
  data/
    gallery-items.ts
  hooks/
    use-mobile.tsx
  lib/
    utils.ts
  pages/
    404.tsx
    CategoryShowcase.tsx
    Contact.tsx
    Discover.tsx
    Galleries.tsx
    Index.tsx
  styles/
    global.css
    typography.css
  App.css
  App.tsx
  index.css
  main.tsx
  vite-env.d.ts
.gitignore
clean-unused-images.js
components.json
eslint.config.js
index.html
netlify.toml
package.json
postcss.config.js
tailwind.config.ts
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="public/placeholder.svg">
<svg xmlns="http://www.w3.org/2000/svg" width="1200" height="1200" fill="none"><rect width="1200" height="1200" fill="#EAEAEA" rx="3"/><g opacity=".5"><g opacity=".5"><path fill="#FAFAFA" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/></g><path stroke="url(#a)" stroke-width="2.418" d="M0-1.209h553.581" transform="scale(1 -1) rotate(45 1163.11 91.165)"/><path stroke="url(#b)" stroke-width="2.418" d="M404.846 598.671h391.726"/><path stroke="url(#c)" stroke-width="2.418" d="M599.5 795.742V404.017"/><path stroke="url(#d)" stroke-width="2.418" d="m795.717 796.597-391.441-391.44"/><path fill="#fff" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/><g clip-path="url(#e)"><path fill="#666" fill-rule="evenodd" d="M616.426 586.58h-31.434v16.176l3.553-3.554.531-.531h9.068l.074-.074 8.463-8.463h2.565l7.18 7.181V586.58Zm-15.715 14.654 3.698 3.699 1.283 1.282-2.565 2.565-1.282-1.283-5.2-5.199h-6.066l-5.514 5.514-.073.073v2.876a2.418 2.418 0 0 0 2.418 2.418h26.598a2.418 2.418 0 0 0 2.418-2.418v-8.317l-8.463-8.463-7.181 7.181-.071.072Zm-19.347 5.442v4.085a6.045 6.045 0 0 0 6.046 6.045h26.598a6.044 6.044 0 0 0 6.045-6.045v-7.108l1.356-1.355-1.282-1.283-.074-.073v-17.989h-38.689v23.43l-.146.146.146.147Z" clip-rule="evenodd"/></g><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/></g><defs><linearGradient id="a" x1="554.061" x2="-.48" y1=".083" y2=".087" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="b" x1="796.912" x2="404.507" y1="599.963" y2="599.965" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="c" x1="600.792" x2="600.794" y1="403.677" y2="796.082" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="d" x1="404.85" x2="796.972" y1="403.903" y2="796.02" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><clipPath id="e"><path fill="#fff" d="M581.364 580.535h38.689v38.689h-38.689z"/></clipPath></defs></svg>
</file>

<file path="src/components/gallery/DetailView.tsx">
import { useState, useEffect, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { ChevronLeft, ChevronRight, Maximize2, X } from 'lucide-react';
import { GalleryItem } from '@/data/gallery-items';
import { cn } from '@/lib/utils';
/**
 * DetailView Component Props
 */
interface DetailViewProps {
  /** Gallery item to display details for */
  item: GalleryItem;
  /** Optional callback when view is closed */
  onClose?: () => void;
}
/**
 * DetailView Component
 * 
 * A dual-display view showing an image preview with thumbnail gallery on the left
 * and detailed information on the right. Features smooth transitions and a metallic
 * theme consistent with the application design.
 */
export const DetailView = ({ item, onClose }: DetailViewProps) => {
  // Track the currently selected image index
  const [selectedIndex, setSelectedIndex] = useState(0);
  // Track fullscreen state and device type
  const [isMobile, setIsMobile] = useState(false);
  // Add state for mobile fullscreen view
  const [isMobileFullscreen, setIsMobileFullscreen] = useState(false);
  // Touch gesture handling
  const touchStart = useRef<number | null>(null);
  const imageRef = useRef<HTMLImageElement>(null);
  // Detect mobile device
  useEffect(() => {
    const checkMobile = () => {
      setIsMobile(window.innerWidth <= 768);
    };
    checkMobile();
    window.addEventListener('resize', checkMobile);
    return () => window.removeEventListener('resize', checkMobile);
  }, []);
  // Handle keyboard navigation
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      switch (e.key) {
        case 'ArrowLeft':
          prevImage();
          break;
        case 'ArrowRight':
          nextImage();
          break;
        case 'Escape':
          if (isMobileFullscreen) {
            setIsMobileFullscreen(false);
          } else {
            onClose?.();
          }
          break;
      }
    };
    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [onClose, isMobileFullscreen]);
  // Combine main images and child images for the gallery
  const allImages = [...item.images, ...(item.childImages || [])];
  // Navigation handlers
  const nextImage = () => setSelectedIndex((prev) => (prev + 1) % allImages.length);
  const prevImage = () => setSelectedIndex((prev) => (prev - 1 + allImages.length) % allImages.length);
  // Fullscreen handler
  const handleFullscreen = async () => {
    if (isMobile) {
      // Use custom fullscreen for mobile
      setIsMobileFullscreen(true);
    } else if (imageRef.current) {
      // Use browser API for desktop
      try {
        if (document.fullscreenElement) {
          await document.exitFullscreen();
        } else {
          await imageRef.current.requestFullscreen();
        }
      } catch (err) {
        console.error('Error attempting to enable fullscreen:', err);
      }
    }
  };
  return (
    <>
      <motion.div 
        className="w-full h-full max-w-7xl mx-auto bg-gradient-to-br from-slate-700 via-zinc-700 to-stone-700 rounded-lg border border-white/10 shadow-2xl overflow-hidden"
        initial={{ scale: 0.9, opacity: 0 }}
        animate={{ scale: 1, opacity: 1 }}
        exit={{ scale: 0.9, opacity: 0 }}
        transition={{ type: "spring", duration: 0.5 }}
      >
        <div className="flex flex-col lg:flex-row h-full relative">
          {/* Close button for the detail view */}
          {onClose && (
            <button
              onClick={onClose}
              className="absolute top-2 right-2 z-50 p-2 rounded-full bg-slate-800/80 hover:bg-slate-700/80 text-white/80 hover:text-white transition-colors"
              aria-label="Close detail view"
            >
              <X className="w-5 h-5" />
            </button>
          )}
          {/* Left side - Image display */}
          <div className="w-full lg:w-2/3 h-[60%] lg:h-full flex flex-col lg:border-r border-white/10">
            {/* Main image container */}
            <div 
              className="relative flex-grow bg-black/20 rounded-lg"
              onTouchStart={(e) => {
                const touch = e.touches[0];
                touchStart.current = touch.clientX;
              }}
              onTouchMove={(e) => {
                if (!touchStart.current) return;
                const touch = e.touches[0];
                const diff = touchStart.current - touch.clientX;
                if (Math.abs(diff) > 50) {
                  if (diff > 0) {
                    nextImage();
                  } else {
                    prevImage();
                  }
                  touchStart.current = null;
                }
              }}
              onTouchEnd={() => {
                touchStart.current = null;
              }}
            >
              <AnimatePresence mode="wait">
                <motion.img
                  ref={imageRef}
                  key={selectedIndex}
                  src={allImages[selectedIndex].url}
                  alt={allImages[selectedIndex].alt}
                  className="absolute inset-0 w-full h-full object-contain cursor-zoom-in"
                  onClick={handleFullscreen}
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  exit={{ opacity: 0 }}
                  transition={{ duration: 0.3 }}
                />
              </AnimatePresence>
              {/* Navigation buttons */}
              <button
                onClick={prevImage}
                className="absolute left-2 lg:left-4 top-1/2 -translate-y-1/2 p-2 rounded-full bg-slate-800/80 hover:bg-slate-700/80 text-white/80 hover:text-white transition-colors"
                aria-label="Previous image"
              >
                <ChevronLeft className="w-6 h-6" />
              </button>
              <button
                onClick={nextImage}
                className="absolute right-2 lg:right-4 top-1/2 -translate-y-1/2 p-2 rounded-full bg-slate-800/80 hover:bg-slate-700/80 text-white/80 hover:text-white transition-colors"
                aria-label="Next image"
              >
                <ChevronRight className="w-6 h-6" />
              </button>
              {/* Fullscreen button */}
              <button
                onClick={handleFullscreen}
                className="absolute top-2 right-12 lg:right-2 p-2 rounded-full bg-slate-800/80 hover:bg-slate-700/80 text-white/80 hover:text-white transition-colors"
                aria-label="Toggle fullscreen"
              >
                <Maximize2 className="w-5 h-5" />
              </button>
            </div>
            {/* Thumbnail gallery */}
            <div className="h-20 mt-3 flex gap-2 px-2 overflow-x-auto">
              {allImages.map((image, index) => (
                <button
                  key={index}
                  onClick={() => setSelectedIndex(index)}
                  className={cn(
                    "relative flex-shrink-0 h-full aspect-square rounded-md overflow-hidden",
                    "hover:ring-2 hover:ring-white/30 transition-all",
                    selectedIndex === index && "ring-2 ring-white/50"
                  )}
                  aria-label={`Select image ${index + 1}`}
                >
                  <img
                    src={image.url}
                    alt={image.alt}
                    className="w-full h-full object-cover"
                  />
                </button>
              ))}
            </div>
          </div>
          {/* Right side - Details display */}
          <div className="w-full lg:w-1/3 h-[40%] lg:h-full p-4 lg:p-6">
            {/* Title */}
            <h2 className="text-xl lg:text-2xl font-bold text-white mb-2 pr-12">
              {item.title}
            </h2>
            {/* Category */}
            <div className="inline-block px-3 py-1 mb-3 rounded-full bg-white/10 text-sm text-white/80">
              {item.category}
            </div>
            {/* Description */}
            <p className="text-sm lg:text-base text-white/80 mb-4 leading-relaxed">
              {item.description}
            </p>
            {/* Image count */}
            <div className="text-sm text-white/60">
              {allImages.length} images in gallery
            </div>
          </div>
        </div>
      </motion.div>
      {/* Mobile Fullscreen View */}
      <AnimatePresence>
        {isMobileFullscreen && (
          <motion.div 
            className="fixed inset-0 z-[200] bg-black flex items-center justify-center"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.3 }}
          >
            {/* Close button */}
            <button
              onClick={() => setIsMobileFullscreen(false)}
              className="absolute top-4 right-4 z-50 p-3 rounded-full bg-black/30 hover:bg-black/50 text-white/90 hover:text-white transition-colors"
              aria-label="Close fullscreen view"
            >
              <X className="w-6 h-6" />
            </button>
            {/* Fullscreen image */}
            <img
              src={allImages[selectedIndex].url}
              alt={allImages[selectedIndex].alt}
              className="max-w-full max-h-full object-contain"
            />
            {/* Navigation overlay for swipe gestures */}
            <div 
              className="absolute inset-0 z-10"
              onTouchStart={(e) => {
                const touch = e.touches[0];
                touchStart.current = touch.clientX;
              }}
              onTouchMove={(e) => {
                if (!touchStart.current) return;
                const touch = e.touches[0];
                const diff = touchStart.current - touch.clientX;
                if (Math.abs(diff) > 50) {
                  if (diff > 0) {
                    nextImage();
                  } else {
                    prevImage();
                  }
                  touchStart.current = null;
                }
              }}
              onTouchEnd={() => {
                touchStart.current = null;
              }}
            />
          </motion.div>
        )}
      </AnimatePresence>
    </>
  );
};
</file>

<file path="src/components/gallery/FullscreenView.tsx">
import { useState, useEffect, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { ChevronLeft, ChevronRight, X } from 'lucide-react';
/**
 * FullscreenView Component Props
 */
interface FullscreenViewProps {
  /** Array of images to display */
  images: { url: string; alt: string; }[];
  /** Initial image index to display */
  initialIndex: number;
  /** Callback when view is closed */
  onClose: () => void;
}
/**
 * FullscreenView Component
 * 
 * A dedicated fullscreen image viewer with navigation controls and smooth transitions.
 * Automatically enters browser fullscreen mode when opened.
 */
export const FullscreenView = ({ images, initialIndex, onClose }: FullscreenViewProps) => {
  const [currentIndex, setCurrentIndex] = useState(initialIndex);
  // Handle fullscreen mode
  useEffect(() => {
    // Enter fullscreen mode when component mounts
    document.documentElement.requestFullscreen();
    // Exit fullscreen mode when component unmounts
    return () => {
      if (document.fullscreenElement) {
        document.exitFullscreen();
      }
    };
  }, []);
  // Navigation handlers
  const nextImage = useCallback(() => setCurrentIndex((prev) => (prev + 1) % images.length), [images.length]);
  const prevImage = useCallback(() => setCurrentIndex((prev) => (prev - 1 + images.length) % images.length), [images.length]);
  // Handle keyboard navigation
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      switch (e.key) {
        case 'ArrowLeft':
          prevImage();
          break;
        case 'ArrowRight':
          nextImage();
          break;
        case 'Escape':
          onClose();
          break;
      }
    };
    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [nextImage, prevImage, onClose]);
  return (
    <div className="fixed inset-0 z-[60] bg-black">
      {/* Main image container */}
      <div className="relative w-full h-full">
        <AnimatePresence mode="wait">
          <motion.img
            key={currentIndex}
            src={images[currentIndex].url}
            alt={images[currentIndex].alt}
            className="absolute inset-0 w-full h-full object-contain"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.3 }}
          />
        </AnimatePresence>
        {/* Navigation controls */}
        <div className="absolute inset-0 flex items-center justify-between p-4">
          <button
            onClick={prevImage}
            className="p-2 rounded-full bg-slate-800/80 hover:bg-slate-700/80 text-white/80 transition-colors"
            aria-label="Previous image"
          >
            <ChevronLeft className="w-6 h-6" />
          </button>
          <button
            onClick={nextImage}
            className="p-2 rounded-full bg-slate-800/80 hover:bg-slate-700/80 text-white/80 transition-colors"
            aria-label="Next image"
          >
            <ChevronRight className="w-6 h-6" />
          </button>
        </div>
        {/* Close button */}
        <button
          onClick={onClose}
          className="absolute top-4 right-4 p-2 rounded-full bg-slate-800/80 hover:bg-slate-700/80 text-white/80 transition-colors"
          aria-label="Close fullscreen view"
        >
          <X className="w-6 h-6" />
        </button>
        {/* Image counter */}
        <div className="absolute bottom-4 left-1/2 -translate-x-1/2 px-3 py-1 rounded-full bg-slate-800/80 text-white/80 text-sm">
          {currentIndex + 1} / {images.length}
        </div>
      </div>
    </div>
  );
};
</file>

<file path="src/components/gallery/GalleryGrid.tsx">
import { useState, useEffect, useMemo, useCallback } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { DetailView } from "./DetailView";
import { GalleryItem } from "@/data/gallery-items";
/* =========================
   SequentialLazyImage Component
   ========================= */
interface SequentialLazyImageProps {
  src: string;
  alt: string;
  forceLoad: boolean;
  onLoaded: () => void;
  className?: string;
  style?: React.CSSProperties;
  onClick?: () => void;
}
const SequentialLazyImage = ({
  src,
  alt,
  forceLoad,
  onLoaded,
  className,
  style,
  onClick,
}: SequentialLazyImageProps) => {
  const mergedStyle = { ...style, pointerEvents: "auto" as const };
  return forceLoad ? (
    <motion.img
      src={src}
      alt={alt}
      className={className}
      style={mergedStyle}
      onLoad={onLoaded}
      onClick={onClick}
      loading="lazy"
    />
  ) : (
    <div className={className} style={mergedStyle} onClick={onClick} />
  );
};
/* =========================
   SequentialColumn Component
   ========================= */
interface SequentialColumnProps {
  items: GalleryItem[];
  cardWidth: number;
  onImageClick: (item: GalleryItem) => void;
  deviceType: "mobile" | "tablet" | "desktop";
  /** If true, iterate the items in reverse order so that images load from the top */
  reverse?: boolean;
  /** If true, force load every image in this column (bypassing lazy loading) */
  forceLoadAll?: boolean;
}
const SequentialColumn = ({
  items,
  cardWidth,
  onImageClick,
  deviceType,
  reverse = false,
  forceLoadAll = false,
}: SequentialColumnProps) => {
  // If reverse is true, create a reversed copy of the items.
  const orderedItems = reverse ? [...items].reverse() : items;
  // For normal mode, track the highest loaded index (starting at 0).
  // For reverse mode, track the lowest loaded index (starting at the last index).
  const [maxLoadedIndex, setMaxLoadedIndex] = useState(0);
  const [minLoadedIndex, setMinLoadedIndex] = useState(orderedItems.length - 1);
  return (
    <>
      {orderedItems.map((item, index) => {
        const forceLoad = forceLoadAll
          ? true
          : !reverse
          ? index <= maxLoadedIndex + 2
          : index >= minLoadedIndex - 2;
        return (
          <motion.div
            key={`${item.id}-${index}`}
            className="w-full flex justify-center"
            layout
            layoutId={`card-${item.id}`}
            initial={{ opacity: 0, scale: 0.8 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.8 }}
            transition={{
              layout: { type: "spring", stiffness: 300, damping: 30 },
              opacity: { duration: 0.2 },
            }}
          >
            <div
              className="relative group cursor-pointer overflow-hidden rounded-2xl"
              style={{ width: `${cardWidth}px` }}
            >
              {/* 3:2 Aspect Ratio Container */}
              <div style={{ position: "relative", width: "100%", paddingTop: "66.67%" }}>
                <SequentialLazyImage
                  src={item.images[0].url}
                  alt={item.title}
                  className="absolute inset-0 w-full h-full object-cover rounded-2xl"
                  forceLoad={forceLoad}
                  onLoaded={() => {
                    if (!reverse) {
                      setMaxLoadedIndex((current) => Math.max(current, index));
                    } else {
                      setMinLoadedIndex((current) => Math.min(current, index));
                    }
                  }}
                  onClick={() => onImageClick(item)}
                />
              </div>
              {/* Overlays with pointerEvents disabled so clicks pass through */}
              <motion.div
                className="absolute inset-0 bg-black/0 group-hover:bg-black/20 transition-colors duration-300 rounded-2xl"
                style={{ pointerEvents: "none" }}
                whileHover={{ scale: 1.03 }}
                transition={{ duration: 0.2 }}
              />
              <motion.div
                className="absolute bottom-0 left-0 right-0 p-4 opacity-0 group-hover:opacity-100 transition-opacity duration-300 bg-gradient-to-t from-black/70 via-black/30 to-transparent rounded-b-2xl"
                style={{ pointerEvents: "none" }}
              >
                <h3 className="text-white text-sm font-light leading-tight">{item.title}</h3>
                {item.childImages && (
                  <div className="text-white/70 text-xs mt-1">
                    +{item.childImages.length} more images
                  </div>
                )}
              </motion.div>
            </div>
          </motion.div>
        );
      })}
    </>
  );
};
/* =========================
   GalleryGrid Component
   ========================= */
const cardSpacing = {
  horizontal: 24, // spacing between columns
  vertical: 80,   // spacing between images in each column
};
const cardWidth = 400; // fixed card width (3:2 aspect ratio implies ~267px height)
const animationsCSS = `
  @keyframes infiniteScroll {
    0% { transform: translate3d(0, 0, 0); }
    100% { transform: translate3d(0, calc(-50% + 1px), 0); }
  }
  @keyframes infiniteScrollDown {
    0% { transform: translate3d(0, calc(-50% + 1px), 0); }
    100% { transform: translate3d(0, 0, 0); }
  }
  @keyframes gradientFlow {
    0% { background-position: 0% 0%; }
    25% { background-position: 100% 0%; }
    50% { background-position: 100% 100%; }
    75% { background-position: 0% 100%; }
    100% { background-position: 0% 0%; }
  }
`;
if (typeof document !== "undefined" && !document.getElementById("gallery-grid-animations")) {
  const style = document.createElement("style");
  style.id = "gallery-grid-animations";
  style.textContent = animationsCSS;
  document.head.appendChild(style);
}
const getDeviceType = (): "mobile" | "tablet" | "desktop" => {
  if (typeof window === "undefined") return "desktop";
  if (window.innerWidth < 768) return "mobile";
  if (window.innerWidth < 1024) return "tablet";
  return "desktop";
};
const getNumColumns = (device: "mobile" | "tablet" | "desktop") => {
  // Mobile and tablet use 2 columns; desktop uses 3.
  return device === "desktop" ? 3 : 2;
};
const getScrollSpeed = (device: "mobile" | "tablet" | "desktop") => {
  return device === "desktop" ? 1.5 : 1;
};
export const GalleryGrid = ({ items }: { items: GalleryItem[] }) => {
  const [selectedItem, setSelectedItem] = useState<GalleryItem | null>(null);
  const [deviceType, setDeviceType] = useState<"mobile" | "tablet" | "desktop">(getDeviceType());
  const [numColumns, setNumColumns] = useState<number>(getNumColumns(getDeviceType()));
  const [scrollSpeed, setScrollSpeed] = useState<number>(getScrollSpeed(getDeviceType()));
  // Manage pause state per column
  const [pausedColumns, setPausedColumns] = useState<{ [key: number]: boolean }>({});
  const handleResize = useCallback(() => {
    const device = getDeviceType();
    const columnsCount = getNumColumns(device);
    setDeviceType(device);
    setNumColumns(columnsCount);
    setScrollSpeed(getScrollSpeed(device));
    setPausedColumns(Object.fromEntries(Array.from({ length: columnsCount }, (_, i) => [i, false])));
  }, []);
  useEffect(() => {
    setPausedColumns(Object.fromEntries(Array.from({ length: numColumns }, (_, i) => [i, false])));
    window.addEventListener("resize", handleResize);
    return () => window.removeEventListener("resize", handleResize);
  }, [handleResize, numColumns]);
  // Prepare duplicated columns for seamless infinite scroll.
  const columns = useMemo(() => {
    const cols: GalleryItem[][] = Array(numColumns)
      .fill(null)
      .map(() => []);
    items.forEach((item, index) => {
      const colIndex = index % numColumns;
      cols[colIndex].push(item);
    });
    // Duplicate each column for seamless scrolling.
    return cols.map((col) => [...col, ...col]);
  }, [items, numColumns]);
  const backgroundStyle = {
    background: `
      radial-gradient(circle at 30% 30%, rgba(176,196,222,0.08), transparent 45%),
      radial-gradient(circle at 70% 70%, rgba(205,127,50,0.08), transparent 45%),
      radial-gradient(circle at 50% 50%, rgba(144,175,144,0.06), transparent 55%),
      linear-gradient(135deg,
        rgba(20,20,20,0.99),
        rgba(176,196,222,0.25),
        rgba(119,136,153,0.2),
        rgba(205,127,50,0.25),
        rgba(144,175,144,0.25),
        rgba(119,136,153,0.2)
      )
    `,
    backgroundSize: "500% 500%",
    animation: "gradientFlow 40s cubic-bezier(0.4, 0, 0.2, 1) infinite",
  };
  // All devices now use vertical scrolling columns.
  return (
    <>
      <div className="w-full h-screen overflow-hidden" style={backgroundStyle}>
        <div
          className="grid h-full"
          style={{
            gridTemplateColumns: deviceType === "desktop" ? "repeat(3, 1fr)" : "repeat(2, 1fr)",
            gap: `${cardSpacing.horizontal}px`,
            padding: "16px",
          }}
        >
          <AnimatePresence>
            {columns.map((column, colIndex) => {
              const reverse = deviceType === "desktop" && colIndex === 1;
              return (
                <div
                  key={colIndex}
                  className="relative overflow-hidden h-full"
                  onMouseEnter={() =>
                    setPausedColumns((prev) => ({ ...prev, [colIndex]: true }))
                  }
                  onMouseLeave={() =>
                    setPausedColumns((prev) => ({ ...prev, [colIndex]: false }))
                  }
                >
                  <div
                    className="flex flex-col items-center absolute top-0 left-0 right-0"
                    style={{
                      minHeight: "100vh",
                      transformOrigin: "50% 0%",
                      gap: `${cardSpacing.vertical}px`,
                      animation: (
                        deviceType === "desktop" && colIndex === 1
                          ? `infiniteScrollDown ${60 / scrollSpeed}s linear infinite`
                          : `infiniteScroll ${60 / scrollSpeed}s linear infinite`
                      ),
                      animationPlayState: pausedColumns[colIndex] ? "paused" : "running",
                      willChange: "transform",
                      backfaceVisibility: "hidden",
                      WebkitBackfaceVisibility: "hidden",
                      transform: "translate3d(0, 0, 0)",
                    }}
                  >
                    <SequentialColumn
                      items={column}
                      cardWidth={cardWidth}
                      onImageClick={setSelectedItem}
                      deviceType={deviceType}
                      reverse={reverse}
                      forceLoadAll={deviceType === "desktop" && colIndex === 1}
                    />
                  </div>
                </div>
              );
            })}
          </AnimatePresence>
        </div>
      </div>
      <AnimatePresence>
        {selectedItem && (
          <motion.div 
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 z-50 flex items-center justify-center bg-black/80 p-4"
          >
            <DetailView item={selectedItem} onClose={() => setSelectedItem(null)} />
          </motion.div>
        )}
      </AnimatePresence>
    </>
  );
};
</file>

<file path="src/components/home/AboutSection.tsx">
import { motion, useScroll, useTransform } from "framer-motion";
import { useRef } from "react";
export const AboutSection = () => {
  const sectionRef = useRef<HTMLElement>(null);
  const { scrollYProgress } = useScroll({
    target: sectionRef,
    offset: ["start end", "end start"]
  });
  const opacity = useTransform(scrollYProgress, [0, 0.2, 0.8, 1], [0, 1, 1, 0]);
  const scale = useTransform(scrollYProgress, [0, 0.2], [0.8, 1]);
  const y = useTransform(scrollYProgress, [0, 0.2, 0.8, 1], [100, 0, 0, -100]);
  return (
    <section ref={sectionRef} className="py-24 relative overflow-hidden">
      {/* Decorative elements */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute -left-4 top-1/4 w-24 h-24 bg-gray-700/30 rounded-full blur-xl" />
        <div className="absolute right-1/4 bottom-1/4 w-32 h-32 bg-gray-700/30 rounded-full blur-xl" />
        <div className="absolute left-1/3 top-1/3 w-16 h-16 bg-gray-700/30 rounded-full blur-xl" />
      </div>
      <div className="max-w-7xl mx-auto px-4 relative">
        <motion.div
          style={{ opacity, scale, y }}
          className="grid grid-cols-1 lg:grid-cols-2 gap-12 items-center"
        >
          {/* Image Section */}
          <motion.div
            initial={{ opacity: 0, x: -50 }}
            whileInView={{ opacity: 1, x: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.8, delay: 0.2 }}
            className="relative"
          >
            <div className="aspect-square rounded-2xl overflow-hidden shadow-2xl">
              <img
                src="/gallery-images/MattCoffey.webp"
                alt="Hey, I'm Matt Coffey, working on some cool metalwork!"
                className="object-cover w-full h-full transform scale-[1.02] hover:scale-[1.05] transition-transform duration-500 [image-orientation:from-image] rotate-0"
                style={{
                  imageOrientation: 'from-image'
                }}
                loading="eager"
                onError={(e) => {
                  console.error('Image failed to load:', e);
                  e.currentTarget.style.display = 'none';
                }}
              />
            </div>
            <div className="absolute -bottom-6 -right-6 w-32 h-32 bg-gradient-to-br from-orange-400/20 to-amber-500/20 rounded-full blur-2xl" />
          </motion.div>
          {/* Content Section */}
          <motion.div
            initial={{ opacity: 0, x: 50 }}
            whileInView={{ opacity: 1, x: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.8, delay: 0.4 }}
            className="space-y-8 relative bg-black/40 p-8 rounded-xl border border-orange-400/20 shadow-2xl backdrop-blur-sm"
          >
            {/* Decorative Bolts */}
            <div className="absolute top-4 left-4 w-3 h-3 rounded-full bg-gradient-to-r from-orange-400 to-amber-500 shadow-lg" />
            <div className="absolute top-4 right-4 w-3 h-3 rounded-full bg-gradient-to-r from-orange-400 to-amber-500 shadow-lg" />
            <div className="absolute bottom-4 left-4 w-3 h-3 rounded-full bg-gradient-to-r from-orange-400 to-amber-500 shadow-lg" />
            <div className="absolute bottom-4 right-4 w-3 h-3 rounded-full bg-gradient-to-r from-orange-400 to-amber-500 shadow-lg" />
            {/* Content */}
            <div className="space-y-4">
              <h2 className="text-5xl font-bold bg-gradient-to-r from-gray-100 via-white to-gray-300 bg-clip-text text-transparent drop-shadow-[0_2px_2px_rgba(255,255,255,0.1)]">
                About Me
              </h2>
              <div className="w-20 h-1 bg-gradient-to-r from-orange-400 to-amber-500" />
            </div>
            <div className="space-y-6 text-lg">
              <motion.p
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                viewport={{ once: true }}
                transition={{ duration: 0.5, delay: 0.6 }}
                className="text-gray-300 font-light leading-relaxed bg-gradient-to-r from-gray-100 via-gray-200 to-gray-100 bg-clip-text"
              >
                With a passion for metalwork and an eye for detail, I specialize in creating 
                custom metal designs that blend functionality with artistic excellence. Each 
                project is an opportunity to push the boundaries of what's possible with metal, 
                transforming raw materials into stunning architectural features.
              </motion.p>
              <motion.p
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                viewport={{ once: true }}
                transition={{ duration: 0.5, delay: 0.8 }}
                className="text-gray-300 font-light leading-relaxed bg-gradient-to-r from-gray-100 via-gray-200 to-gray-100 bg-clip-text"
              >
                My approach combines traditional craftsmanship with modern techniques, 
                ensuring every piece not only meets but exceeds expectations. Whether it's 
                a custom railing, architectural feature, or artistic installation, I work 
                closely with clients to bring their vision to life with precision and creativity.
              </motion.p>
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                viewport={{ once: true }}
                transition={{ duration: 0.5, delay: 1 }}
                className="flex items-center gap-4 pt-4"
              >
                <div className="flex flex-col">
                  <span className="text-4xl font-bold bg-gradient-to-r from-gray-100 via-white to-gray-300 bg-clip-text text-transparent drop-shadow-[0_2px_2px_rgba(255,255,255,0.1)]">25+</span>
                  <span className="text-sm text-gray-400">Years Experience</span>
                </div>
                <div className="w-px h-12 bg-gray-700" />
                <div className="flex flex-col">
                  <span className="text-4xl font-bold bg-gradient-to-r from-gray-100 via-white to-gray-300 bg-clip-text text-transparent drop-shadow-[0_2px_2px_rgba(255,255,255,0.1)]">1500+</span>
                  <span className="text-sm text-gray-400">Projects Completed</span>
                </div>
              </motion.div>
            </div>
          </motion.div>
        </motion.div>
      </div>
    </section>
  );
};
</file>

<file path="src/components/home/CTASection.tsx">
import { ArrowRight, Sparkles } from 'lucide-react';
import { Link } from 'react-router-dom';
export const CTASection = () => {
  return (
    <section className="relative py-24 overflow-hidden bg-gradient-to-b from-charcoal to-zinc-900">
      {/* Background texture */}
      <div className="absolute inset-0 bg-[url('/metal-texture.jpg')] mix-blend-overlay opacity-5 z-0" />
      {/* Animated accent lines */}
      <div className="absolute inset-0 z-[1]">
        <div className="absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-transparent via-bronze to-transparent animate-pulse opacity-50" />
        <div className="absolute bottom-0 left-0 w-full h-1 bg-gradient-to-r from-transparent via-silver to-transparent animate-pulse delay-700 opacity-50" />
      </div>
      <div className="relative max-w-[1400px] mx-auto px-4 z-10">
        <div className="max-w-4xl mx-auto text-center">
          {/* Main heading */}
          <h2 className="text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl lg:text-6xl
            text-white mb-8 relative z-20">
            See Something You Like? Let's Chat!
          </h2>
          {/* Subheading with improved typography */}
          <p className="text-xl md:text-2xl text-white/90 mb-12 leading-relaxed
            max-w-2xl mx-auto relative z-20">
            I'm always available to discuss your next project and how I can help you take your idea and transform it into a masterfully-crafted addition to your home or business! 
          </p>
          {/* CTA button with enhanced effects */}
          <div className="relative group z-20">
            <div className="absolute -inset-1 bg-gradient-to-r from-bronze via-silver to-bronze 
              rounded-lg blur opacity-70 group-hover:opacity-100 transition duration-1000 
              group-hover:duration-200 animate-gradient-xy"></div>
            <Link
              to="/contact"
              className="relative inline-flex items-center px-8 py-4 text-lg md:text-xl font-semibold 
                bg-[linear-gradient(135deg,#18181b_0%,#27272a_70%,#f59e0b_85%,#fbbf24_100%)]
                hover:bg-amber-500 hover:bg-none
                text-white rounded-lg transition-all duration-700
                transform hover:-translate-y-1 group/button
                border border-bronze/20 hover:border-amber-400
                shadow-lg hover:shadow-2xl hover:shadow-amber-500/50
                after:absolute after:inset-0 after:rounded-lg
                after:transition-all after:ease-in
                after:[background:theme(colors.amber.500/0)]
                hover:after:animate-intensify-glow
                overflow-hidden
                [&_*]:z-10 [&_*]:relative"
            >
              <span className="flex items-center transition-colors duration-700">
                <Sparkles className="w-5 h-5 mr-3 animate-pulse text-white 
                  group-hover/button:text-amber-100 group-hover/button:animate-spark" />
                Start Your Project
                <ArrowRight className="ml-3 group-hover/button:translate-x-1 transition-transform
                  group-hover/button:text-amber-100" />
              </span>
            </Link>
          </div>
        </div>
      </div>
      <style>
        {`
          @keyframes intensify-glow {
            0% {
              background: linear-gradient(135deg, rgb(245 158 11 / 0.1), rgb(245 158 11 / 0.2), rgb(251 191 36 / 0.3));
              box-shadow: 0 0 20px rgb(245 158 11 / 0.2);
            }
            50% {
              background: linear-gradient(135deg, rgb(245 158 11 / 0.2), rgb(245 158 11 / 0.3), rgb(251 191 36 / 0.4));
              box-shadow: 0 0 30px rgb(245 158 11 / 0.3);
            }
            100% {
              background: linear-gradient(135deg, rgb(245 158 11 / 0.3), rgb(245 158 11 / 0.4), rgb(251 191 36 / 0.5));
              box-shadow: 0 0 40px rgb(245 158 11 / 0.4);
            }
          }
          @keyframes spark {
            0%, 100% { opacity: 1; transform: scale(1); }
            50% { opacity: 0.7; transform: scale(1.2); }
          }
        `}
      </style>
    </section>
  );
};
</file>

<file path="src/components/home/HeroSection.tsx">
import { ArrowRight } from 'lucide-react';
import { Link } from 'react-router-dom';
import { motion } from 'framer-motion';
export const HeroSection = () => {
  return (
    <div className="relative h-screen -mx-4">
      <div className="absolute inset-0 bg-gradient-to-b from-charcoal/80 to-charcoal/60 z-10" />
      <div 
        className="absolute inset-0 bg-[url('/gallery-images/MattCoffeyHero.jpeg')] 
        bg-cover bg-center bg-fixed"
      />
      <div className="relative z-20 h-full flex items-center justify-center">
        <div className="max-w-7xl mx-auto px-4 py-16 md:py-20">
          <motion.div
            initial={{ y: 20, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{ duration: 0.5 }}
          >
            <div className="relative">
              <h1 className="text-4xl md:text-6xl font-bold text-center mb-6 bg-clip-text text-transparent bg-gradient-to-r from-white via-orange-400 to-orange-600 animate-ember-pulse relative z-10 py-2">
                Matt Coffey Design
              </h1>
              <div 
                className="absolute inset-x-0 mx-auto w-full max-w-xs bg-red-600 opacity-50 blur-lg animate-pulse z-0"
                aria-hidden="true"
              />
              <div 
                className="absolute inset-x-0 mx-auto w-full max-w-xs bg-heading-shine bg-[length:400%_100%] animate-shine opacity-70 z-0"
                style={{
                  backgroundSize: '200% 100%',
                  mixBlendMode: 'overlay'
                }}
                aria-hidden="true"
              />
            </div>
          </motion.div>
          <div className="flex flex-col sm:flex-row gap-4 justify-center items-center mt-8">
            <Link
              to="/discover"
              className="inline-flex items-center px-8 py-4 text-lg font-semibold 
              relative bg-[linear-gradient(135deg,#18181b_0%,#27272a_70%,#f59e0b_85%,#fbbf24_100%)]
              hover:bg-amber-500 hover:bg-none
              text-white rounded-lg transition-all duration-300
              shadow-lg hover:shadow-xl transform hover:-translate-y-1
              border border-bronze/20 hover:border-amber-400
              group hover:animate-nod overflow-hidden"
            >
              Explore my Work
              <ArrowRight className="ml-2 group-hover:translate-x-1 transition-transform" />
            </Link>
            <Link
              to="/contact"
              className="inline-flex items-center px-8 py-4 text-lg font-semibold 
              relative bg-[linear-gradient(135deg,#18181b_0%,#27272a_70%,#f59e0b_85%,#fbbf24_100%)]
              hover:bg-amber-500 hover:bg-none
              text-white rounded-lg transition-all duration-300
              shadow-lg hover:shadow-xl transform hover:-translate-y-1
              border border-bronze/20 hover:border-amber-400
              group hover:animate-nod overflow-hidden"
            >
              Contact me!
              <ArrowRight className="ml-2 group-hover:translate-x-1 transition-transform" />
            </Link>
            <Link
              to="/galleries"
              className="inline-flex items-center px-8 py-4 text-lg font-semibold 
              relative bg-[linear-gradient(135deg,#18181b_0%,#27272a_70%,#f59e0b_85%,#fbbf24_100%)]
              hover:bg-amber-500 hover:bg-none
              text-white rounded-lg transition-all duration-300
              shadow-lg hover:shadow-xl transform hover:-translate-y-1
              border border-bronze/20 hover:border-amber-400
              group hover:animate-nod overflow-hidden"
            >
              Specialties
              <ArrowRight className="ml-2 group-hover:translate-x-1 transition-transform" />
            </Link>
          </div>
        </div>
      </div>
    </div>
  );
};
</file>

<file path="src/components/home/InstagramFeed.tsx">
import { useEffect } from 'react';
// Add type declaration for Instagram embed script
declare global {
  interface Window {
    instgrm?: {
      Embeds: {
        process(): void;
      };
    };
  }
}
export const InstagramFeed = () => {
  useEffect(() => {
    // Ensure Instagram embed script is loaded and initialized
    if (window.instgrm) {
      window.instgrm.Embeds.process();
    }
  }, []);
  return (
    <section className="relative w-full pb-12 pt-24 bg-gradient-to-b from-charcoal to-zinc-900">
      {/* Metallic overlay with reduced opacity */}
      <div className="absolute inset-0 bg-[url('/metal-texture.jpg')] mix-blend-overlay opacity-5 z-0" />
      <div className="container relative mx-auto px-4 z-10">
        {/* Section Header */}
        <div className="text-center mb-16 relative z-20">
          <h2 className="text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl text-white">
            Explore My Instagram
          </h2>
          <p className="text-xl text-white/90 mt-4 font-medium">
            Take a look at some projects I've built for people just like you!
          </p>
        </div>
        <div className="flex justify-center relative z-10">
          {/* Instagram Feed - Centered */}
          <div className="flex justify-center w-full max-w-[540px] relative">
            <div className="absolute -inset-4 bg-gradient-to-r from-bronze/20 via-silver/20 to-bronze/20 
              rounded-xl blur-md opacity-50"></div>
            <blockquote 
              className="instagram-media relative" 
              data-instgrm-permalink="https://www.instagram.com/mattcoffeydesign/"
              data-instgrm-version="14"
              style={{ 
                background: 'transparent',
                border: 0,
                borderRadius: '3px',
                boxShadow: 'none',
                margin: '1px',
                maxWidth: '540px',
                minWidth: '326px',
                padding: 0,
                width: 'calc(100% - 2px)'
              }}
            >
            </blockquote>
          </div>
        </div>
      </div>
    </section>
  );
};
</file>

<file path="src/components/home/Testimonials.tsx">
// Testimonials data with expanded content for continuous scroll
const testimonials = [
  {
    text: "Matt's attention to detail and craftsmanship is absolutely top-notch. The custom railing he crafted for our home? Pure art!",
    author: "Sarah Johnson",
    role: "Homeowner"
  },
  {
    text: "I'm in love with my fireplace! Amazing custom craftsmanship. I had an idea of what I wanted our fireplace to look like and Matt helped us make it come to life! We would 100% order from him again, and we ALWAYS recommend him to friends of ours!",
    author: "Emily Silverstein",
    role: "Homeowner"
  },
  {
    text: "Matt's work is simply outstanding. His artistic touch has completely transformed our space.",
    author: "Jeremy Rodriguez",
    role: "Homeowner"
  },
  {
    text: "Matt supplied and install many very cool accessories to our home. Gates, pergola grills, vineyard, sign, bathroom, mirrors, cabinet handles, and accessories for my wine room.  Matt has a very good sense of design and his quality of fabrication is exceptional!",
    author: "Jim Barnes",
    role: "Architect and Home Builder"
  },
  {
    text: "We reached out to Matt for a custom handrail at our cabin. After our initial meeting we were so impressed with his work that we ended up purchasing a gorgeous chandelier and a set of super stylish handcrafted bar stools as well!",
    author: "Mike and Genie Styles",
    role: "Homeowners"
  },
  {
    text: "Matt's work is a perfect mix of traditional craftsmanship and modern design. The gates he made for us are simply masterpieces, and bring the entire front landscaping together!",
    author: "Robert Wilson",
    role: "Homeowner"
  },
  {
    text: "I have done business with Matt for a long time, and will continue to! The quality and intricacy of his work is simply unmatched, and he continually enables us to sell the best custom furniture on the market!",
    author: "Anonymous",
    role: "High-end Furniture Retailer"
  },
  {
    text: "Got busy yesterday and didn't get the chance to shoot you a quick note concerning how pleased we are with the final product. We're just as happy with the wine rack also and greatly appreciate both your efforts towards making us so...for what most likly will be the rest of our lives in this house. There's just something about good art done well and Matt's pieces are just that! Beautiful, masterfully crafted, and built to last. We're looking forward to our next project with you!",
    author: "John and Carol Sear",
    role: "Homeowners"
  }, 
  {
    text: "Matt has built us some incredible pieces for our gallery and home. Matt is a true artist and it shows in every piece he creates",
    author: "Rob and Gina Evins",
    role: "Homeowners"
  }
];
export const Testimonials = () => {
  return (
    <section className="pt-16 pb-0 overflow-hidden">
      {/* Top Divider */}
      <div className="w-full flex items-center gap-4 px-8 mb-12">
        <div className="h-px bg-gradient-to-r from-transparent via-orange-400/30 to-transparent flex-grow" />
        <div className="flex gap-1.5 items-center">
          <div className="w-1.5 h-1.5 rounded-full bg-gradient-to-r from-orange-400 to-amber-500" />
          <div className="w-2 h-2 rounded-full bg-gradient-to-r from-orange-400 to-amber-500" />
          <div className="w-1.5 h-1.5 rounded-full bg-gradient-to-r from-orange-400 to-amber-500" />
        </div>
        <div className="h-px bg-gradient-to-r from-transparent via-orange-400/30 to-transparent flex-grow" />
      </div>
      <h2 className="text-3xl md:text-4xl font-bold text-center mb-12 text-white font-cinzel">
        Client Testimonials
      </h2>
      {/* Marquee container */}
      <div className="relative">
        {/* First marquee - moving left */}
        <div className="marquee-container mb-4 md:mb-6 lg:mb-8">
          <div className="marquee-content">
            {[...testimonials.slice(0, 3), ...testimonials.slice(0, 3)].map((testimonial, index) => (
              <div 
                key={index}
                className="testimonial-card group relative hover:z-10"
              >
                <div className="testimonial-content">
                  <p className="text-white mb-6 text-base md:text-lg lg:text-xl font-normal tracking-wide" style={{ textShadow: '0 0 10px rgba(255,255,255,0.3)' }}>"{testimonial.text}"</p>
                  <div>
                    <p className="font-bold text-white text-base md:text-lg tracking-wide" style={{ textShadow: '0 0 8px rgba(255,255,255,0.25)' }}>{testimonial.author}</p>
                    <p className="text-red-hot font-semibold tracking-wide">{testimonial.role}</p>
                  </div>
                </div>
                {/* Decorative Divider */}
                <div className="absolute -right-8 top-1/2 -translate-y-1/2 h-16 flex items-center">
                  <div className="w-px h-full bg-gradient-to-b from-transparent via-orange-400/30 to-transparent" />
                  <div className="absolute top-1/2 -translate-y-1/2 -translate-x-1/2 w-2 h-2 rounded-full bg-gradient-to-r from-orange-400 to-amber-500" />
                  <div className="absolute top-0 -translate-x-1/2 w-1.5 h-1.5 rounded-full bg-gradient-to-r from-orange-400 to-amber-500" />
                  <div className="absolute bottom-0 -translate-x-1/2 w-1.5 h-1.5 rounded-full bg-gradient-to-r from-orange-400 to-amber-500" />
                </div>
              </div>
            ))}
          </div>
        </div>
        {/* Second marquee - moving right */}
        <div className="marquee-container">
          <div className="marquee-content-reverse">
            {[...testimonials.slice(3), ...testimonials.slice(3)].map((testimonial, index) => (
              <div 
                key={index}
                className="testimonial-card group relative hover:z-10"
              >
                <div className="testimonial-content">
                  <p className="text-white mb-6 italic text-base md:text-lg lg:text-xl font-normal tracking-wide" style={{ textShadow: '0 0 10px rgba(255,255,255,0.3)' }}>"{testimonial.text}"</p>
                  <div>
                    <p className="font-bold text-white text-base md:text-lg tracking-wide" style={{ textShadow: '0 0 8px rgba(255,255,255,0.25)' }}>{testimonial.author}</p>
                    <p className="text-red-hot font-semibold tracking-wide">{testimonial.role}</p>
                  </div>
                </div>
                {/* Decorative Divider */}
                <div className="absolute -right-8 top-1/2 -translate-y-1/2 h-16 flex items-center">
                  <div className="w-px h-full bg-gradient-to-b from-transparent via-orange-400/30 to-transparent" />
                  <div className="absolute top-1/2 -translate-y-1/2 -translate-x-1/2 w-2 h-2 rounded-full bg-gradient-to-r from-orange-400 to-amber-500" />
                  <div className="absolute top-0 -translate-x-1/2 w-1.5 h-1.5 rounded-full bg-gradient-to-r from-orange-400 to-amber-500" />
                  <div className="absolute bottom-0 -translate-x-1/2 w-1.5 h-1.5 rounded-full bg-gradient-to-r from-orange-400 to-amber-500" />
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
      {/* Bottom Divider */}
      <div className="w-full flex items-center gap-4 px-8 mt-12">
        <div className="h-px bg-gradient-to-r from-transparent via-orange-400/30 to-transparent flex-grow" />
        <div className="flex gap-1.5 items-center">
          <div className="w-1.5 h-1.5 rounded-full bg-gradient-to-r from-orange-400 to-amber-500" />
          <div className="w-2 h-2 rounded-full bg-gradient-to-r from-orange-400 to-amber-500" />
          <div className="w-1.5 h-1.5 rounded-full bg-gradient-to-r from-orange-400 to-amber-500" />
        </div>
        <div className="h-px bg-gradient-to-r from-transparent via-orange-400/30 to-transparent flex-grow" />
      </div>
    </section>
  );
};
</file>

<file path="src/components/ui/alert-dialog.tsx">
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"
import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"
const AlertDialog = AlertDialogPrimitive.Root
const AlertDialogTrigger = AlertDialogPrimitive.Trigger
const AlertDialogPortal = AlertDialogPrimitive.Portal
const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName
const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName
const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"
const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"
const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName
const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName
const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName
const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName
export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}
</file>

<file path="src/components/ui/button.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"
const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)
export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}
const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"
export { Button, buttonVariants }
</file>

<file path="src/components/ui/card.tsx">
import * as React from "react"
import { cn } from "@/lib/utils"
const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"
const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"
const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"
const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"
const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"
const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"
export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
</file>

<file path="src/components/ui/carousel.tsx">
import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]
type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}
type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps
const CarouselContext = React.createContext<CarouselContextProps | null>(null)
function useCarousel() {
  const context = React.useContext(CarouselContext)
  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }
  return context
}
const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)
    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }
      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])
    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])
    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])
    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )
    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }
      setApi(api)
    }, [api, setApi])
    React.useEffect(() => {
      if (!api) {
        return
      }
      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)
      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])
    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"
const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()
  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"
const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()
  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"
const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()
  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"
const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()
  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"
export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}
</file>

<file path="src/components/ui/dialog.tsx">
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"
import { cn } from "@/lib/utils"
const Dialog = DialogPrimitive.Root
const DialogTrigger = DialogPrimitive.Trigger
const DialogPortal = DialogPrimitive.Portal
const DialogClose = DialogPrimitive.Close
const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName
const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName
const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"
const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"
const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName
const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName
export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}
</file>

<file path="src/components/ui/Footer.tsx">
import { Link } from 'react-router-dom'
import { useState } from 'react'
import Modal from './Modal'
import PrivacyPolicy from './PrivacyPolicy'
import TermsOfService from './TermsOfService'
const Footer = () => {
  const [isPrivacyOpen, setIsPrivacyOpen] = useState(false)
  const [isTermsOpen, setIsTermsOpen] = useState(false)
  return (
    <footer className="bg-black text-gray-300 py-16">
      <div className="container mx-auto px-4">
        {/* Logo Section */}
        <div className="flex justify-center mb-12">
          <Link to="/" className="h-16">
            <img 
              src="/MattCoffeyDesignLOGO.jpg" 
              alt="Matt Coffey Design" 
              className="h-full invert"
            />
          </Link>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-12">
          {/* Copyright Section */}
          <div className="space-y-6">
            <h2 className="text-xl font-semibold text-white">Legal</h2>
            <div className="flex flex-col space-y-3">
              <button 
                onClick={() => setIsPrivacyOpen(true)} 
                className="text-left hover:text-white transition-colors"
              >
                Privacy Policy
              </button>
              <button 
                onClick={() => setIsTermsOpen(true)} 
                className="text-left hover:text-white transition-colors"
              >
                Terms of Service
              </button>
              {/* Privacy Policy Modal */}
              <Modal
                isOpen={isPrivacyOpen}
                onClose={() => setIsPrivacyOpen(false)}
                title="Privacy Policy"
              >
                <PrivacyPolicy />
              </Modal>
              {/* Terms of Service Modal */}
              <Modal
                isOpen={isTermsOpen}
                onClose={() => setIsTermsOpen(false)}
                title="Terms of Service"
              >
                <TermsOfService />
              </Modal>
              <p className="text-gray-400">
                &copy; {new Date().getFullYear()} MattCoffeyDesign. All Rights Reserved.
              </p>
            </div>
          </div>
          {/* Contact Us */}
          <div className="space-y-6">
            <h2 className="text-xl font-semibold text-white">Contact Us</h2>
            <div className="space-y-3 text-gray-400">
              <p>Traverse City, MI</p>
              <p>Phone: (231) 645-0622</p>
              <p>Email: mattcoffeydesign@gmail.com</p>
            </div>
          </div>
          {/* Follow Us */}
          <div className="space-y-6">
            <h2 className="text-xl font-semibold text-white">Follow Us</h2>
            <div className="flex space-x-4">
              <a
                href="https://www.instagram.com/mattcoffeydesign/"
                target="_blank"
                rel="noopener noreferrer"
                className="text-gray-400 hover:text-white transition-colors"
              >
                <span className="sr-only">Instagram</span>
                <svg className="h-6 w-6" fill="currentColor" viewBox="0 0 24 24">
                  <path
                    fillRule="evenodd"
                    d="M12.315 2c2.43 0 2.784.013 3.808.06 1.064.049 1.791.218 2.427.465a4.902 4.902 0 011.772 1.153 4.902 4.902 0 011.153 1.772c.247.636.416 1.363.465 2.427.048 1.067.06 1.407.06 4.123v.08c0 2.643-.012 2.987-.06 4.043-.049 1.064-.218 1.791-.465 2.427a4.902 4.902 0 01-1.153 1.772 4.902 4.902 0 01-1.772 1.153c-.636.247-1.363.416-2.427.465-1.067.048-1.407.06-4.123.06h-.08c-2.643 0-2.987-.012-4.043-.06-1.064-.049-1.791-.218-2.427-.465a4.902 4.902 0 01-1.772-1.153 4.902 4.902 0 01-1.153-1.772c-.247-.636-.416-1.363-.465-2.427-.047-1.024-.06-1.379-.06-3.808v-.63c0-2.43.013-2.784.06-3.808.049-1.064.218-1.791.465-2.427a4.902 4.902 0 011.153-1.772A4.902 4.902 0 015.45 2.525c.636-.247 1.363-.416 2.427-.465C8.901 2.013 9.256 2 11.685 2h.63zm-.081 1.802h-.468c-2.456 0-2.784.011-3.807.058-.975.045-1.504.207-1.857.344-.467.182-.8.398-1.15.748-.35.35-.566.683-.748 1.15-.137.353-.3.882-.344 1.857-.047 1.023-.058 1.351-.058 3.807v.468c0 2.456.011 2.784.058 3.807.045.975.207 1.504.344 1.857.182.466.399.8.748 1.15.35.35.683.566 1.15.748.353.137.882.3 1.857.344 1.054.048 1.37.058 4.041.058h.08c2.597 0 2.917-.01 3.96-.058.976-.045 1.505-.207 1.858-.344.466-.182.8-.398 1.15-.748.35-.35.566-.683.748-1.15.137-.353.3-.882.344-1.857.048-1.055.058-1.37.058-4.041v-.08c0-2.597-.01-2.917-.058-3.96-.045-.976-.207-1.505-.344-1.858a3.097 3.097 0 00-.748-1.15 3.098 3.098 0 00-1.15-.748c-.353-.137-.882-.3-1.857-.344-1.023-.047-1.351-.058-3.807-.058zM12 6.865a5.135 5.135 0 110 10.27 5.135 5.135 0 010-10.27zm0 1.802a3.333 3.333 0 100 6.666 3.333 3.333 0 000-6.666zm5.338-3.205a1.2 1.2 0 110 2.4 1.2 1.2 0 010-2.4z"
                    clipRule="evenodd"
                  />
                </svg>
              </a>
              <a
                href="https://www.facebook.com/profile.php?id=100051512784908"
                target="_blank"
                rel="noopener noreferrer"
                className="text-gray-400 hover:text-white transition-colors"
              >
                <span className="sr-only">Facebook</span>
                <svg className="h-6 w-6" fill="currentColor" viewBox="0 0 24 24">
                  <path
                    fillRule="evenodd"
                    d="M22 12c0-5.523-4.477-10-10-10S2 6.477 2 12c0 4.991 3.657 9.128 8.438 9.878v-6.987h-2.54V12h2.54V9.797c0-2.506 1.492-3.89 3.777-3.89 1.094 0 2.238.195 2.238.195v2.46h-1.26c-1.243 0-1.63.771-1.63 1.562V12h2.773l-.443 2.89h-2.33v6.988C18.343 21.128 22 16.991 22 12z"
                    clipRule="evenodd"
                  />
                </svg>
              </a>
            </div>
          </div>
        </div>
      </div>
    </footer>
  )
}
export default Footer
</file>

<file path="src/components/ui/form.tsx">
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"
import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"
const Form = FormProvider
type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}
const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)
const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}
const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()
  const fieldState = getFieldState(fieldContext.name, formState)
  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }
  const { id } = itemContext
  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}
type FormItemContextValue = {
  id: string
}
const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)
const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()
  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"
const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()
  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"
const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()
  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"
const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()
  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"
const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children
  if (!body) {
    return null
  }
  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"
export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}
</file>

<file path="src/components/ui/label.tsx">
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"
const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)
const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName
export { Label }
</file>

<file path="src/components/ui/Modal.tsx">
import { useEffect } from 'react'
interface ModalProps {
  isOpen: boolean
  onClose: () => void
  title: string
  children: React.ReactNode
}
const Modal = ({ isOpen, onClose, title, children }: ModalProps) => {
  // Close modal on escape key press
  useEffect(() => {
    const handleEscape = (event: KeyboardEvent) => {
      if (event.key === 'Escape') {
        onClose()
      }
    }
    if (isOpen) {
      document.addEventListener('keydown', handleEscape)
    }
    return () => {
      document.removeEventListener('keydown', handleEscape)
    }
  }, [isOpen, onClose])
  if (!isOpen) return null
  return (
    <div className="fixed inset-0 z-50 overflow-y-auto">
      {/* Backdrop */}
      <div 
        className="fixed inset-0 bg-black bg-opacity-50 transition-opacity"
        onClick={onClose}
      />
      {/* Modal */}
      <div className="flex min-h-full items-center justify-center p-4">
        <div className="relative w-full max-w-2xl transform rounded-lg bg-white p-6 text-left shadow-xl transition-all">
          {/* Header */}
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-medium leading-6 text-gray-900">
              {title}
            </h3>
            <button
              onClick={onClose}
              className="text-gray-400 hover:text-gray-500"
            >
              <span className="sr-only">Close</span>
              <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
          {/* Content */}
          <div className="mt-2 text-gray-600">
            {children}
          </div>
        </div>
      </div>
    </div>
  )
}
export default Modal
</file>

<file path="src/components/ui/pagination.tsx">
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"
import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"
const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"
const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"
const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"
type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">
const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"
const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"
const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"
const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"
export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}
</file>

<file path="src/components/ui/PrivacyPolicy.tsx">
const PrivacyPolicy = () => {
  return (
    <div className="space-y-4">
      <h4 className="text-lg font-semibold">Privacy Policy</h4>
      <p>Last updated: {new Date().toLocaleDateString()}</p>
      <section className="space-y-2">
        <h5 className="font-medium">Information We Collect</h5>
        <p>
          We collect information you provide directly to us when you contact us through our website,
          including your name, email address, phone number, and any other information you choose to provide.
        </p>
      </section>
      <section className="space-y-2">
        <h5 className="font-medium">How We Use Your Information</h5>
        <p>
          We use the information we collect to:
        </p>
        <ul className="list-disc pl-5 space-y-1">
          <li>Respond to your inquiries and provide customer service</li>
          <li>Send you updates about our services and projects</li>
          <li>Improve our website and services</li>
          <li>Comply with legal obligations</li>
        </ul>
      </section>
      <section className="space-y-2">
        <h5 className="font-medium">Information Sharing</h5>
        <p>
          We do not sell, trade, or otherwise transfer your personal information to outside parties.
          This does not include trusted third parties who assist us in operating our website or
          servicing you, as long as those parties agree to keep this information confidential.
          WE ARE NOT INTERESTED IN YOUR SELLING YOUR PERSONAL INFORMATION! This is a personal, 
          portfolio-based website, SOLELY for the purpose of building and/or furthering the
          development, revenue, and progress of my client. 
        </p>
      </section>
      <section className="space-y-2">
        <h5 className="font-medium">Contact Us</h5>
        <p>
          If you have any questions about this Privacy Policy, please contact us at mattcoffeydesign@gmail.com
        </p>
      </section>
    </div>
  )
}
export default PrivacyPolicy
</file>

<file path="src/components/ui/separator.tsx">
import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"
import { cn } from "@/lib/utils"
const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName
export { Separator }
</file>

<file path="src/components/ui/sheet.tsx">
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"
import * as React from "react"
import { cn } from "@/lib/utils"
const Sheet = SheetPrimitive.Root
const SheetTrigger = SheetPrimitive.Trigger
const SheetClose = SheetPrimitive.Close
const SheetPortal = SheetPrimitive.Portal
const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName
const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)
interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
  VariantProps<typeof sheetVariants> { }
const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName
const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"
const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"
const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName
const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName
export {
  Sheet, SheetClose,
  SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger
}
</file>

<file path="src/components/ui/skeleton.tsx">
import { cn } from "@/lib/utils"
function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}
export { Skeleton }
</file>

<file path="src/components/ui/sonner.tsx">
import { Toaster as Sonner } from "sonner"
type ToasterProps = React.ComponentProps<typeof Sonner>
const Toaster = ({ ...props }: ToasterProps) => {
  return (
    <Sonner
      theme="light"
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}
export { Toaster }
</file>

<file path="src/components/ui/switch.tsx">
import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"
import { cn } from "@/lib/utils"
const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName
export { Switch }
</file>

<file path="src/components/ui/TermsOfService.tsx">
const TermsOfService = () => {
  return (
    <div className="space-y-4">
      <h4 className="text-lg font-semibold">Terms of Service</h4>
      <p>Last updated: {new Date().toLocaleDateString()}</p>
      <section className="space-y-2">
        <h5 className="font-medium">Agreement to Terms</h5>
        <p>
          By accessing our website, you agree to be bound by these Terms of Service and to comply
          with all applicable laws and regulations. If you do not agree with any of these terms,
          you are prohibited from using or accessing this site.
        </p>
      </section>
      <section className="space-y-2">
        <h5 className="font-medium">Use License</h5>
        <p>
          Permission is granted to temporarily view the materials (information or software) on
          Matt Coffey Design's website for personal, non-commercial transitory viewing only.
          This is the grant of a license, not a transfer of title, and under this license you may not:
        </p>
        <ul className="list-disc pl-5 space-y-1">
          <li>Modify or copy the materials</li>
          <li>Use the materials for any commercial purpose</li>
          <li>Remove any copyright or other proprietary notations from the materials</li>
          <li>Transfer the materials to another person or "mirror" the materials on any other server</li>
        </ul>
      </section>
      <section className="space-y-2">
        <h5 className="font-medium">Disclaimer</h5>
        <p>
          The materials on Matt Coffey Design's website are provided on an 'as is' basis.
          Matt Coffey Design makes no warranties, expressed or implied, and hereby disclaims
          and negates all other warranties including, without limitation, implied warranties
          or conditions of merchantability, fitness for a particular purpose, or non-infringement
          of intellectual property or other violation of rights.
        </p>
      </section>
      <section className="space-y-2">
        <h5 className="font-medium">Contact Information</h5>
        <p>
          If you have any questions about these Terms of Service, please contact us at mattcoffeydesign@gmail.com
        </p>
      </section>
    </div>
  )
}
export default TermsOfService
</file>

<file path="src/components/DynamicRevealSection.tsx">
import React, { useRef } from "react";
import { motion, useScroll, useTransform } from "framer-motion";
const DynamicRevealSection: React.FC = () => {
  const sectionRef = useRef<HTMLDivElement>(null);
  const { scrollYProgress } = useScroll({
    target: sectionRef,
    offset: ["start end", "end start"]
  });
  const x = useTransform(scrollYProgress, [0, 1], [-100, 0]);
  return (
    <section ref={sectionRef} className="py-12 px-6 bg-white overflow-hidden">
      <motion.h2 style={{ x }} className="text-3xl font-bold text-center mb-6">
        More About Our Craft
      </motion.h2>
      <motion.p
        initial={{ opacity: 0 }}
        whileInView={{ opacity: 1 }}
        transition={{ duration: 1 }}
        className="max-w-2xl mx-auto text-center text-gray-700"
      >
        As you scroll, discover the passion and workmanship behind each piece. Our designs are built on years of expertise and attention to detail.
      </motion.p>
    </section>
  );
};
export default DynamicRevealSection;
</file>

<file path="src/components/MetalworkCarousel.tsx">
import { useNavigate } from "react-router-dom";
import {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselNext,
  CarouselPrevious,
} from "@/components/ui/carousel";
import { categoryShowcases } from "@/data/gallery-items";
const MetalworkCarousel = () => {
  const navigate = useNavigate();
  const handleCategoryClick = (category: string) => {
    // Create the same URL-friendly ID as in Galleries.tsx
    const sectionId = category.toLowerCase().replace(/[, ]/g, '-');
    navigate(`/galleries#${sectionId}`);
  };
  return (
    <div className="container mx-auto px-4 my-8">
      {/* Main heading with metallic effect */}
      <h2 className="text-4xl font-bold text-center mb-8 font-cinzel bg-gradient-to-r from-gray-100 via-white to-gray-300 bg-clip-text text-transparent drop-shadow-[0_2px_2px_rgba(255,255,255,0.1)]">
        Visit my Gallery
      </h2>
      <div className="max-w-[900px] mx-auto">
        <Carousel>
          <CarouselContent>
            {categoryShowcases.map((showcase, index) => (
              <CarouselItem key={index}>
                <div 
                  className="cursor-pointer"
                  onClick={() => handleCategoryClick(showcase.category)}
                >
                  <div className="relative w-full h-[400px] rounded-lg">
                    <div className="absolute inset-0 overflow-hidden rounded-lg">
                      <img
                        src={showcase.url}
                        alt={showcase.alt}
                        className="w-full h-full object-cover"
                      />
                      {/* Enhanced gradient overlay for better text visibility */}
                      <div className="absolute inset-0 bg-gradient-to-t from-black/90 via-black/50 to-transparent">
                        <div className="absolute bottom-8 left-8 right-8">
                          {/* Category title with metallic gradient */}
                          <h3 className="text-4xl font-bold font-cinzel mb-3 bg-gradient-to-r from-orange-400 to-amber-500 bg-clip-text text-transparent drop-shadow-[0_2px_4px_rgba(0,0,0,0.3)]">
                            {showcase.category}
                          </h3>
                          {/* Description with enhanced visibility */}
                          <p className="text-xl text-gray-100 mt-2 font-light leading-relaxed drop-shadow-[0_2px_4px_rgba(0,0,0,0.5)]">
                            {showcase.description}
                          </p>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </CarouselItem>
            ))}
          </CarouselContent>
          <CarouselPrevious className="left-2" />
          <CarouselNext className="right-2" />
        </Carousel>
      </div>
    </div>
  );
};
export default MetalworkCarousel;
</file>

<file path="src/components/Navigation.tsx">
import { useState } from 'react';
import { Link } from 'react-router-dom';
import { Menu, X } from 'lucide-react';
const Navigation = () => {
  const [isOpen, setIsOpen] = useState(false);
  return (
    <nav className="fixed w-full z-50 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 border-b border-border">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between items-center h-16">
          {/* Logo on the left */}
          <Link to="/" className="h-14">
            <img 
              src="/MattCoffeyDesignLOGO.jpg" 
              alt="Matt Coffey Design" 
              className="h-full invert"
            />
          </Link>
          {/* Centered Navigation */}
          <div className="hidden md:block absolute left-1/2 -translate-x-1/2">
            <div className="flex items-center space-x-8">
              <Link to="/" className="text-silver hover:text-cream transition-colors">
                Home
              </Link>
              <Link to="/discover" className="text-silver hover:text-cream transition-colors">
                Discover Me
              </Link>
              <Link to="/contact" className="text-silver hover:text-cream transition-colors">
                Contact
              </Link>
              <Link to="/galleries" className="text-silver hover:text-cream transition-colors">
                Galleries
              </Link>
            </div>
          </div>
          {/* Mobile menu button */}
          <div className="md:hidden">
            <button
              onClick={() => setIsOpen(!isOpen)}
              className="text-silver hover:text-cream"
            >
              {isOpen ? <X size={24} /> : <Menu size={24} />}
            </button>
          </div>
        </div>
      </div>
      {/* Mobile Navigation */}
      {isOpen && (
        <div className="md:hidden animate-fadeIn">
          <div className="px-2 pt-2 pb-3 space-y-1 bg-background border-b border-border">
            <Link
              to="/"
              className="block px-3 py-2 text-silver hover:text-cream"
              onClick={() => setIsOpen(false)}
            >
              Home
            </Link>
            <Link
              to="/discover"
              className="block px-3 py-2 text-silver hover:text-cream"
              onClick={() => setIsOpen(false)}
            >
              Discover Me
            </Link>
            <Link
              to="/contact"
              className="block px-3 py-2 text-silver hover:text-cream"
              onClick={() => setIsOpen(false)}
            >
              Contact
            </Link>
            <Link
              to="/galleries"
              className="block px-3 py-2 text-silver hover:text-cream"
              onClick={() => setIsOpen(false)}
            >
              Galleries
            </Link>
          </div>
        </div>
      )}
    </nav>
  );
};
export default Navigation;
</file>

<file path="src/components/PageTransition.tsx">
import { motion } from "framer-motion";
import { ReactNode } from "react";
interface PageTransitionProps {
  children: ReactNode;
}
export const PageTransition = ({ children }: PageTransitionProps) => {
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      transition={{
        type: "spring",
        stiffness: 100,
        damping: 20,
        duration: 0.3
      }}
    >
      {children}
    </motion.div>
  );
};
</file>

<file path="src/components/ScrollIndicator.tsx">
import React from "react";
import { motion, useScroll, useTransform } from "framer-motion";
const ScrollIndicator: React.FC = () => {
  const { scrollYProgress } = useScroll();
  const scaleX = useTransform(scrollYProgress, [0, 1], [0, 1]);
  return (
    <motion.div className="fixed top-0 left-0 right-0 h-2 bg-gray-200 z-50">
      <motion.div className="h-full bg-blue-600" style={{ scaleX }} />
    </motion.div>
  );
};
export default ScrollIndicator;
</file>

<file path="src/data/gallery-items.ts">
export type GalleryItem = {
  id: number;
  category: 'Railings, Fences, and Gates' | 'Custom Furniture' | 'Commercial' | 'Art and Decor' | 'Doors and Windows' | 'Behind the Scenes' | 'Custom Projects';
  title: string;
  description: string;
  images: {
    url: string;
    alt: string;
  }[];
  childImages?: {
    url: string;
    alt: string;
  }[];
  isCategoryImage?: boolean;
};
export type CategoryShowcase = {
  category: GalleryItem['category'];
  url: string;
  alt: string;
  description: string;
};
export const categories = [
  'All',
  'Railings, Fences, and Gates',
  'Custom Furniture',
  'Commercial',
  'Art and Decor',
  'Doors and Windows',
  'Behind the Scenes',
  'Custom Projects'
] as const;
export const categoryShowcases: CategoryShowcase[] = [
  {
    category: 'Railings, Fences, and Gates',
    url: "/gallery-images/CustomSecurity_NaturesGate1.jpeg",
    alt: "Custom Railings and Gates Showcase",
    description: "Durable, long-lasting, and stylish"
  },
  {
    category: 'Custom Furniture',
    url: "/gallery-images/CustomIndoor-CounterTop 2.jpeg",
    alt: "Custom Furniture Showcase",
    description: "View hand-crafted custom metal furniture, from stools to lighting fixtures"
  },
  {
    category: 'Commercial',
    url: "/gallery-images/GypsyFarms_CustomBarBuild7 2.jpeg",
    alt: "Commercial Projects Showcase",
    description: "Experience the transformation of commercial spaces with my custom installations"
  },
  {
    category: 'Art and Decor',
    url: "/gallery-images/CustomMetalWallDecor1 2.jpeg",
    alt: "Art and Decor Showcase",
    description: "Browse through my hand-crafted metal wall art and decor"
  },
  {
    category: 'Doors and Windows',
    url: "/gallery-images/CustomDoor-SlidingPantryBarnDoors2.jpg",
    alt: "Doors and Windows Showcase",
    description: "Discover stylish, industrial door and window solutions"
  },
  {
    category: 'Behind the Scenes',
    url: "/gallery-images/workshop1 2.jpeg",
    alt: "Behind the Scenes Showcase",
    description: "Discover the detail-driven process of my projects, from idea to completion"
  },
  {
    category: 'Custom Projects',
    url: "/gallery-images/CustomStovehood1 2.jpeg",
    alt: "Custom Projects Showcase",
    description: "Browse my customized indoor solutions"
  }
];
export const galleryItems: GalleryItem[] = [
  // Custom Projects
  {
    id: 1,
    category: 'Custom Projects',
    title: 'Hand-Forged Iron Privacy Screen',
    description: 'A beautiful custom metal privacy screen, suspended from reclaimed barnwood beams, overlooking the stunning West Grand Traverse Bay',
    images: [
      { url: '/gallery-images/outdoormetalguardrailfloral1.jpeg', alt: 'Front view' }
    ],
    childImages: [
      { url: '/gallery-images/outdoormetalguardrailfloral1-1.jpeg', alt: 'Front view' },
      { url: '/gallery-images/outdoormetalguardrailfloral1-2.jpeg', alt: 'Up-close view' },
      { url: '/gallery-images/outdoormetalguardrailfloral1-3.jpeg', alt: 'From rough metal' },
      { url: '/gallery-images/outdoormetalguardrailfloral1-4.jpeg', alt: 'To a Polished Finished Product' }
    ]
  },
  // Commercial Projects
  {
    id: 2,
    category: 'Commercial',
    title: 'Bonobo Winery Transformation!',
    description: 'Bonobo Winery in Traverse City, MI gets a full indoor transformation!',
    images: [
      { url: '/gallery-images/BonoboWinery1.jpeg', alt: 'Front view' }
    ],
    childImages: [
      { url: '/gallery-images/BonoboWinery2.jpeg', alt: 'Front view' },
      { url: '/gallery-images/BonoboWinery3.jpeg', alt: 'Custom sliding interior barn doors' }
    ]
  },
  {
    id: 3,
    category: 'Commercial',
    title: 'Riverwalk Grill',
    description: 'Riverwalk Grill gets a full renovation to create a modern, industrial dining experience',
    images: [
      { url: '/gallery-images/RiverwalkGrill4.jpeg', alt: 'Front view' }
    ],
    childImages: [
      { url: '/gallery-images/RiverwalkGrill2.jpeg', alt: 'High-end, industrial bar design' },
      { url: '/gallery-images/RiverwalkGrill3.jpeg', alt: 'Hand-forged, custom metal wall decor' },
      { url: '/gallery-images/RiverwalkGrill1.jpeg', alt: 'Custom metal bar sign for Riverwalk Grill' },
      { url: '/gallery-images/RiverwalkGrill5.jpeg', alt: 'Full commercial bar renovation' },
      { url: '/gallery-images/RiverwalkGrill6.jpeg', alt: 'Riverwalk Grill custom metal Taproom sign' },
      { url: '/gallery-images/RiverwalkGrill7.jpeg', alt: 'Custom-built cozy booths' },
      { url: '/gallery-images/RiverwalkGrill8.jpeg', alt: 'Custom wall decor' },
      { url: '/gallery-images/RiverwalkGrill9.jpeg', alt: 'Fully renovated dining spaces' }
    ]
  },
  {
    id: 4,
    category: 'Commercial',
    title: 'Silver Spruce Brewing co. in Traverse City, MI',
    description: 'Silver Spruce Brewing co. in Traverse City, MI gets a full renovation to create a modern, industrial dining experience',
    images: [
      { url: '/gallery-images/SilverSpruceBrewingco6.jpeg', alt: 'Front view' }
    ],
    childImages: [
      { url: '/gallery-images/SilverSpruceBrewingco2.jpeg', alt: 'Custom bar design, side-view' },
      { url: '/gallery-images/SilverSpruceBrewingco3.jpeg', alt: 'Custom-built railing, bar, and stools' },
      { url: '/gallery-images/SilverSpruceBrewingco4.jpeg', alt: 'Reclaimed barnwood beams connected by heavy-duty custom brackets' },
      { url: '/gallery-images/SilverSpruceBrewingco5.jpeg', alt: 'Front-view of finished bar with custom stools and lighting' },
      { url: '/gallery-images/SilverSpruceBrewingco7.jpeg', alt: 'Custom bar accents and decor' },
      { url: '/gallery-images/SilverSpruceBrewingco8.jpeg', alt: 'Fully custom seating for 25+ customers at once' },
      { url: '/gallery-images/SilverSpruceBrewingco9.jpeg', alt: 'Handcrafted steel beer taps with custom metal signage' },
      { url: '/gallery-images/SilverSpruceBrewingco1.jpeg', alt: 'Custom-built bar with reclaimed barnwood beams' },
      { url: '/gallery-images/SilverSpruceBrewingco-CustomVanity.jpg', alt: 'Custom-built vanity with custom steel frame and reclaimed barnwood accents' },
      { url: '/gallery-images/SilverSpruceBrewingco-process.jpeg', alt: 'Behind the scenes!' }
    ]
  },
  //Railings, Fences, and Gates
  {
    id: 5,
    category: 'Railings, Fences, and Gates',
    title: 'Handcrafted Metal Railing',
    description: 'A custom railing solution for a Traverse City homeowner',
    images: [
      { url: '/gallery-images/metalrailing3-1.jpeg', alt: 'Front view' }
    ],
    childImages: [
      { url: '/gallery-images/metalrailing3-2.jpeg', alt: 'Custom safety rails around staircase' },
      { url: '/gallery-images/metalrailing3-3.jpeg', alt: 'Looking up from the first floor' },
      { url: '/gallery-images/metalrailing3-5.jpeg', alt: 'Looking down from the second floor' }
    ]
  },
  //Doors and Windows
  {
    id: 6,
    category: 'Doors and Windows',
    title: 'Hand-Forged, Solid Steel Door',
    description: 'Industrial-style steel door with custom hardware, made-to-fit',
    images: [
      { url: '/gallery-images/CustomMetalDoor1 2.jpeg', alt: 'Front view' }
    ],
    childImages: [
      { url: '/gallery-images/CustomMetalDoor1-1 2.jpeg', alt: 'Installation process' },
      { url: '/gallery-images/CustomMetalDoor1-2 2.jpeg', alt: 'Detail view' }
    ]
  },
  //Custom Furniture
  {
    id: 7,
    category: 'Custom Furniture',
    title: 'Wood Block Table',
    description: 'A handcrafted, block-style table with custom metal legs and accents',
    images: [
      { url: '/gallery-images/custom-table-woodblocks1.jpeg', alt: 'Front view' }
    ],
    childImages: [
      { url: '/gallery-images/custom-table-woodblocks1-1.jpeg', alt: 'Hand-forged, solid steel legs and accents' }
    ]
  },
  {
    id: 8,
    category: 'Railings, Fences, and Gates',
    title: 'Handforged Steel Gate',
    description: 'Custom-crafted masonary-style gate, hand-forged from steel',
    images: [
      { url: '/gallery-images/CustomGate_MasonaryBricks1 2.jpeg', alt: 'Front view' }
    ],
    childImages: [
      { url: '/gallery-images/CustomGate_MasonaryBricks2 2.jpeg', alt: 'Custom-built to fit on custom steel brackets' },
      { url: '/gallery-images/CustomGate_MasonaryBricks3 2.jpeg', alt: 'Custom metal gate handle' }
    ]
  },
  {
    id: 9,
    category: 'Railings, Fences, and Gates',
    title: 'Custom Nature-Themed Steel Gate',
    description: 'A beautiful, handcrafted steel gate built for a driveway',
    images: [
      { url: '/gallery-images/CustomGate_FloralDesign1-2.jpeg', alt: 'Front view' }
    ],
    childImages: [
      { url: '/gallery-images/CustomGate_FloralDesign1-3.jpeg', alt: 'Custom metal gate handle' },
      { url: '/gallery-images/CustomGate_FloralDesign1-4.jpeg', alt: 'Custom metal gate handle' },
      { url: '/gallery-images/CustomGate_FloralDesign1-5.jpeg', alt: 'Custom metal gate handle' }
    ]
  },
  {
    id: 10,
    category: 'Railings, Fences, and Gates',
    title: 'Custom Bear Gate, Hand-Forged from Steel',
    description: 'Custom built driveway gate with an intricate bear design',
    images: [
      { url: '/gallery-images/CustomGate_Bear1 2.jpeg', alt: 'Front view' }
    ],
    childImages: [
      { url: '/gallery-images/CustomGate_Bear1-1 2.jpeg', alt: 'Complete installation build includes posts, gate, and custom hardware boxes' }
    ]
  },
  {
    id: 11,
    category: 'Railings, Fences, and Gates',
    title: 'Custom Steel Security Gate and Fencing',
    description: 'Custom-built steel gate and fencing, nature-themed and expertly crafted',
    images: [
      { url: '/gallery-images/CustomSecurity_NaturesGate1.jpeg', alt: 'Front view' }
    ],
    childImages: [
      { url: '/gallery-images/CustomSecurity_NaturesFence1-3.jpeg', alt: 'Meticulous attention to detail' },
      { url: '/gallery-images/CustomSecurity_NaturesFence1-2.jpeg', alt: 'Secondary view of the fencing' },
      { url: '/gallery-images/CustomSecurity_NaturesFence1-4.jpeg', alt: 'Another view of the security solution' },
      { url: '/gallery-images/CustomSecurity_NaturesFence3.jpg', alt: 'Another view of the security solution' }
    ]
  },
  {
    id: 12,
    category: 'Custom Projects',
    title: 'Custom Crafted Stovehood',
    description: 'A beautiful metallic stovehood, an excellent accent to the matching custom countertop!',
    images: [
      { url: '/gallery-images/CustomStovehood1 2.jpeg', alt: 'Front view' }
    ],
    childImages: [
      { url: '/gallery-images/CustomStovehood1-2 2.jpeg', alt: 'Up-close, detailed view of the finished piece' },
      { url: '/gallery-images/CustomStovehood-PROCESS1.jpeg', alt: 'Behind the scenes! Custom Stovehood Installation' }
    ],
    isCategoryImage: false
  },
  {
    id: 14,
    category: 'Commercial',
    title: 'Villa Mari Custom Wine Displays',
    description: 'A comprehensive and custom wine storage solution, featuring metal spiraling bottle displays and custom-fitted storage racks',
    images: [
      { url: '/gallery-images/VillaMari1.jpeg', alt: 'Front view' }
    ],
    childImages: [
      { url: '/gallery-images/VillaMari2.jpeg', alt: 'Side view of the metal spiral wine rack, seamlessly integrated into a barrel display.' },
      { url: '/gallery-images/VillaMari3.jpeg', alt: 'A broader look at the custom-built wine storage, featuring multiple handcrafted racks.' },
      { url: '/gallery-images/VillaMari4.jpeg', alt: 'An expanded view of the custom wine storage, showcasing elegant metal craftsmanship.' },
      { url: '/gallery-images/VillaMari5.jpeg', alt: 'A wider perspective on the handcrafted barrel wine racks, emphasizing scale and function.' },
      { url: '/gallery-images/VillaMari6.jpeg', alt: 'A tabletop metal wine holder, integrating artistic curves into a compact design.' },
      { url: '/gallery-images/VillaMari7.jpeg', alt: 'A sleek, suspended metal shelf system, blending wine storage with modern aesthetics.' },
      { url: '/gallery-images/VillaMari8.jpeg', alt: 'A showroom-ready display featuring metal-framed storage and boutique presentation.' }
    ],
    isCategoryImage: false
  },
  {
    id: 15,
    category: 'Commercial',
    title: 'Union Cantina Metalwork Project 1',
    description: 'A completely hand-forged renovation of Union Cantina in Traverse City, Michigan',
    images: [
      { url: '/gallery-images/UnionCantina1.jpeg', alt: 'Front view' }
    ],
    childImages: [
      { url: '/gallery-images/UnionCantina2.jpeg', alt: 'Close-up of the sunburst metal light fixture, radiating warmth and ambiance.' },
      { url: '/gallery-images/UnionCantina3.jpeg', alt: 'A long view of the interior featuring handcrafted metal chairs and rustic wood tables.' },
      { url: '/gallery-images/UnionCantina4.jpeg', alt: 'Another perspective showcasing the metal-accented seating area and industrial lighting.' },
      { url: '/gallery-images/UnionCantina5.jpeg', alt: 'A view from the entrance, highlighting the fusion of metal, wood, and ambient lighting.' },
      { url: '/gallery-images/UnionCantina6.jpeg', alt: 'A cozy corner featuring metal-framed furniture and candle-lit ambiance.' },
      { url: '/gallery-images/UnionCantina7.jpeg', alt: 'A close-up of the custom metal dining chairs, designed for both comfort and elegance.' }
    ],
    isCategoryImage: false
  },
  {
    id: 16,
    category: 'Custom Furniture',
    title: 'Industrial Steel & Wood Table',
    description: 'A handcrafted steel-reinforced wooden table with a riveted metal edge for a bold industrial touch.',
    images: [
      { url: '/gallery-images/Custom-Steel-Table2 2.jpeg', alt: 'Front view' }
    ],
    childImages: [],
    isCategoryImage: false
  },
  {
    id: 17,
    category: 'Custom Furniture',
    title: 'Steel & Wood Bar Stool',
    description: 'A stunning fusion of sleek black steel and beautifully grained wood, designed for both style and durability.',
    images: [
      { url: '/gallery-images/Custom-SteelandWood-Stool2.jpeg', alt: 'Front view' }
    ],
    childImages: [
      { url: '/gallery-images/Custom-SteelandWood-Stool2-1.jpeg', alt: 'Side view of the handcrafted steel and wood bar stool, highlighting the unique grain pattern.' }
    ],
    isCategoryImage: false
  },
  {
    id: 18,
    category: 'Art and Decor',
    title: 'Hand-Forged Boat Anchor',
    description: 'A fully functional, hand-forged steel anchor with a rugged, weathered finish for an authentic maritime aesthetic.',
    images: [
      { url: '/gallery-images/Custom-BoatAnchor.jpeg', alt: 'Front view' }
    ],
    childImages: [],
    isCategoryImage: false
  },
  {
    id: 19,
    category: 'Art and Decor',
    title: 'Handcrafted Metal Candle Holder',
    description: 'An elegant wall-mounted candle holder with hand-formed scrolling metal leaves, blending rustic charm with fine craftsmanship.',
    images: [
      { url: '/gallery-images/Custom-CandleHolder 2.jpeg', alt: 'Front view' }
    ],
    childImages: [],
    isCategoryImage: false
  },
  {
    id: 20,
    category: 'Railings, Fences, and Gates',
    title: 'Custom Handrails for Seniors',
    description: 'Expertly crafted metal handrails, blending form and function for enhanced safety without sacrificing aesthetics.',
    images: [
      { url: '/gallery-images/Custom-Crafted Handrails for seniors1.jpeg', alt: 'Front view' }
    ],
    childImages: [
      { url: '/gallery-images/Custom-Crafted Handrails for seniors2.jpeg', alt: 'A wide-angle view showcasing the sturdy, elegant metal handrails along a landscaped path.' },
      { url: '/gallery-images/Custom-Crafted Handrails for seniors2-1.jpeg', alt: 'A closer look at the smooth metal finish and precision welds of the handrail design.' },
      { url: '/gallery-images/Custom-Crafted Handrails for seniors2-2.jpeg', alt: 'Handrails installed along a lakeside property, providing safety with a sleek, unobtrusive look.' }
    ],
    isCategoryImage: false
  },
  {
    id: 21,
    category: 'Art and Decor',
    title: 'Custom Fire Safety Box',
    description: 'A sleek, modern fire extinguisher cabinet with a bold cutout flame design, adding both style and functionality to safety.',
    images: [
      { url: '/gallery-images/Custom-FireSafetyBox1 2.jpeg', alt: 'Front view' }
    ],
    childImages: [
      { url: '/gallery-images/Custom-FireSafetyBox2 2.jpeg', alt: 'Detailed description of the image' }
    ],
    isCategoryImage: false
  },
  {
    id: 22,
    category: 'Railings, Fences, and Gates',
    title: 'Industrial Indoor Accenting Project',
    description: 'A complete industrial solution including stylish steel supports and railings.',
    images: [
      { url: '/gallery-images/IndustrialIndoor1.jpeg', alt: 'Front view' }
    ],
    childImages: [
      { url: '/gallery-images/IndustrialIndoor2.jpeg', alt: 'Secondary view of the project, showcasing the handforged steel rails' },
      { url: '/gallery-images/IndustrialIndoor3.jpeg', alt: 'A third view of the project, highlighting the intricate details of the steel supports' },
      { url: '/gallery-images/IndustrialIndoor4.jpeg', alt: 'A fourth view of the project, showing the finished look of the barn renovation' },
    ],
    isCategoryImage: false
  },
  {
    id: 23,
    category: 'Custom Projects',
    title: 'Interior Barn Renovation',
    description: 'A complete renovation including stylish steel supports and railings.',
    images: [
      { url: '/gallery-images/IndoorBarnBuild-rail1.jpeg', alt: 'Front view' }
    ],
    childImages: [
      { url: '/gallery-images/IndoorBarnBuild-rail2.jpeg', alt: 'Secondary view of the project, showcasing the handforged steel rails' },
      { url: '/gallery-images/IndoorBarnBuild-rail3.jpeg', alt: 'A third view of the project, highlighting the intricate details of the steel supports' },
      { url: '/gallery-images/IndoorBarnBuild-rail4.jpeg', alt: 'A fourth view of the project, showing the finished look of the barn renovation' },
      { url: '/gallery-images/IndoorBarnBuild-rail5.jpeg', alt: 'A fifth view of the project, providing a closer look at the handforged rails' },
      { url: '/gallery-images/IndoorBarnBuildPROCESS1.jpeg', alt: 'A behind-the-scenes look at the construction of the barn renovation' },
      { url: '/gallery-images/IndoorBarnBuildPROCESS1-2.jpeg', alt: 'Another behind-the-scenes look at the construction of the barn renovation' },
    ],
    isCategoryImage: false
  },
  {
    id: 24,
    category: 'Custom Projects',
    title: 'Custom Steel Fireplace',
    description: 'A hand-crafted, masterful steel fireplace cover for an industrial touch of style in this Suttons Point home.',
    images: [
      { url: '/gallery-images/CustomSteelFireplace1.jpeg', alt: 'Front view' }
    ],
    childImages: [
      { url: '/gallery-images/CustomSteelFireplace1-2.jpeg', alt: 'A closer look at the smooth metal finish and precision welds of the handrail design.' },
      { url: '/gallery-images/CustomSteelFireplace1-3.jpeg', alt: 'A second-story view of the handcrafted steel fireplace, showcasing the intricate detailing and elegant curves.' },
      { url: '/gallery-images/CustomSteelFireplace1-4.jpeg', alt: 'An alternate view' },
      { url: '/gallery-images/CustomSteelFireplace1-5-PROCESS.jpeg', alt: 'Behind the scenes!' }
    ],
    isCategoryImage: false
  },
  {
    id: 25,
    category: 'Railings, Fences, and Gates',
    title: 'Wrought Iron Vineyard Gate',
    description: 'A handcrafted vineyard-inspired metal gate, adorned with intricate grapevine details and elegant curves.',
    images: [
      { url: '/gallery-images/CustomMetalGate1 2.jpeg', alt: 'Front view' }
    ],
    childImages: [
      { url: '/gallery-images/CustomMetalGate1-1 2.jpeg', alt: 'Alternate view of the vineyard gate, highlighting detailed metalwork and scenic backdrop.' }
    ],
    isCategoryImage: false
  },
  {
    id: 26,
    category: 'Custom Furniture',
    title: 'Live Edge Bench',
    description: 'A handcrafted live-edge wood bench with custom-forged metal legs, combining rustic charm with industrial strength.',
    images: [
      { url: '/gallery-images/CustomBench1 2.jpeg', alt: 'Front view' }
    ],
    childImages: [
        { url: '/gallery-images/CustomBench1-1 2.jpeg', alt: 'Close-up of the custom metal legs, showcasing hand-forged details and polished mounting plates.' }
      ],
      isCategoryImage: false
    },
    {
      id: 27,
      category: 'Custom Furniture',
      title: 'Polished Copper Bar Tops',
      description: 'Luxurious handcrafted Copper bar tops, meticulously polished for a sleek and reflective finish.',
      images: [
        { url: '/gallery-images/CustomCopperBartops1 2.jpeg', alt: 'Front view' }
      ],
      isCategoryImage: false
    },
    {
      id: 28,
      category: 'Commercial',
      title: 'High-Five Spirits Bar',
      description: 'Complete interior bar redesign at High-Five Spirits in Traverse City, Michigan',
      images: [
        { url: '/gallery-images/HighFiveSpirits7.jpeg', alt: 'Front view' }
      ],
      childImages: [
        { url: '/gallery-images/HighFiveSpirits3.jpeg', alt: 'Alternate view of the interior, showcasing the custom metal work and rustic wood tables.' },
        { url: '/gallery-images/HighFiveSpirits4.jpeg', alt: 'Close-up of the custom metal chairs, adding both comfort and elegance to the space.' },
        { url: '/gallery-images/HighFiveSpirits5.jpeg', alt: 'View of the kitchen, showcasing the custom cabinetry and wood countertops.' },
        { url: '/gallery-images/HighFiveSpirits6.jpeg', alt: 'Close-up of the custom metal bar, adding both style and functionality to the space.' },
        { url: '/gallery-images/HighFiveSpirits1.jpeg', alt: 'View of the living room, showcasing the custom textiles and wood flooring.' },
        { url: '/gallery-images/HighFiveSpirits2.jpeg', alt: 'Team Photo at High-Five Spirits after renovation!' }
      ],
      isCategoryImage: false
    },
    {
      id: 29,
      category: 'Commercial',
      title: 'Gypsy Farms Renovation',
      description: 'Full Interior Design and Renovation at Gypsy Farms in Petoskey, Michigan',
      images: [
        { url: '/gallery-images/GypsyFarms_CustomBarBuild7 2.jpeg', alt: 'Front view' }
      ],
      childImages: [
        { url: '/gallery-images/GypsyFarms_CustomBarBuild3.jpeg', alt: 'Alternate view of the interior, showcasing the custom metal work and rustic wood tables.' },
        { url: '/gallery-images/GypsyFarms_CustomBarBuild2.jpeg', alt: 'Close-up of the custom metal chairs, adding both comfort and elegance to the space.' },
        { url: '/gallery-images/GypsyFarms_CustomLightFixtures1 2.jpeg', alt: 'View of the kitchen, showcasing the custom cabinetry and wood countertops.' },
        { url: '/gallery-images/GypsyFarms_CustomLightFixtures1-1 2.jpeg', alt: 'Close-up of the custom metal bar, adding both style and functionality to the space.' },
        { url: '/gallery-images/GypsyFarms_CustomLightFixtures1-2 2.jpeg', alt: 'View of the living room, showcasing the custom textiles and wood flooring.' },
        { url: '/gallery-images/GypsyFarms_CustomVanity1 2.jpeg', alt: 'Close-up of the custom metal coffee table, adding both style and functionality to the space.' },
        { url: '/gallery-images/GypsyFarms_CustomVanity1-1 2.jpeg', alt: 'View of the dining room, showcasing the custom wood and metal chairs.' },
        { url: '/gallery-images/GypsyFarms_CustomVanity1-2.jpeg', alt: 'Close-up of the custom metal console table, adding both style and functionality to the space.' }
      ],
      isCategoryImage: false
    },
    {
      id: 30,
      category: 'Custom Furniture',
      title: 'Industrial Steel Kitchen Countertop',
      description: 'A bold steel kitchen countertop with a rugged industrial edge, seamlessly integrated into a rustic-modern space.',
      images: [
        { url: '/gallery-images/CustomIndoor-CounterTop 2.jpeg', alt: 'Front view' }
      ],
      isCategoryImage: false
    },
    {
      id: 31,
      category: 'Custom Projects',
      title: 'Custom Fireplace Hot-Rolled Patina',
      description: 'Hot-rolled patina and clear coat added to existing steel fireplace. fireplace surround, blending contemporary aesthetics with industrial strength in a modern home setting.',
      images: [
        { url: '/gallery-images/CustomIndoor-SteelFireplace1 2.jpeg', alt: 'Front view' }
      ],
      childImages: [
        { url: '/gallery-images/CustomIndoor-SteelFireplace2 2.jpeg', alt: 'Alternate angle of the steel fireplace surround, showcasing its towering structure and seamless finish.' }
      ],
      isCategoryImage: false
    },
    {
      id: 32,
      category: 'Railings, Fences, and Gates',
      title: 'Handcrafted Metal Stair Railing',
      description: 'A meticulously crafted wrought iron stair railing featuring elegant scrollwork and twisted balusters.',
      images: [
        { url: '/gallery-images/CustomIndoorRailing1 2.jpeg', alt: 'Front view' }
      ],
      childImages: [
        { url: '/gallery-images/CustomIndoorRailing1-2.jpeg', alt: 'Another angle of the decorative metal stair railing, emphasizing intricate details and craftsmanship.' },
        { url: '/gallery-images/CustomIndoorRailing1-3.jpeg', alt: 'Close-up of the custom metal handrail, highlighting smooth curves and secure mounting points.' }
      ],
      isCategoryImage: false
    },
    {
      id: 33,
      category: 'Custom Furniture',
      title: 'Minimalist Floating Metal Shelves',
      description: 'Sleek and modern floating metal shelves with a rounded frame, seamlessly integrated into the wall for a contemporary aesthetic.',
      images: [
        { url: '/gallery-images/CustomIndoorShelving 2.jpeg', alt: 'Front view' }
      ],
      isCategoryImage: false
    },
    {
      id: 34,
      category: 'Doors and Windows',
      title: 'Industrial Steel Vault Doors',
      description: 'A pair of industrial steel vault doors, featuring a unique design with a custom-welded frame and a rugged industrial edge.',
      images: [
        { url: '/gallery-images/VaultDoor1.jpeg', alt: 'Front view' },
      ],
      childImages: [
        { url: '/gallery-images/VaultDoor2.jpeg', alt: 'Close-up of the steel vault door, showcasing the custom-welded frame and rugged industrial edge.' },
        { url: '/gallery-images/VaultDoor3.jpeg', alt: 'Secondary view' },
        { url: '/gallery-images/VaultDoor4.jpeg', alt: 'Alternate view' },
        { url: '/gallery-images/VaultDoor-handle.jpeg', alt: 'Custom Steel Captains Handle' },
        { url: '/gallery-images/VaultDoor-PROCESS1.jpeg', alt: 'Behind the scenes!' },
      ],
      isCategoryImage: false
    },
    {
      id: 35,
      category: 'Doors and Windows',
      title: 'Sliding Barnwood and Steel Doors',
      description: 'A pair of sliding barnwood and steel doors, featuring a unique design with a custom-welded frame and a rugged industrial edge.',
      images: [
        { url: '/gallery-images/CustomDoor-SlidingPantryBarnDoors1.jpg', alt: 'Front view' }
      ],
      childImages: [
        { url: '/gallery-images/CustomDoor-SlidingPantryBarnDoors2.jpg', alt: 'Close-up of the steel vault door, showcasing the custom-welded frame and rugged industrial edge.' },
      ],
      isCategoryImage: false
    },
    {
      id: 36,
      category: 'Doors and Windows',
      title: 'Custom Steel Doors',
      description: 'A pair of custom steel doors, featuring a unique design with a custom-welded frame and a rugged industrial edge.',
      images: [
        { url: '/gallery-images/CustomMetalDoor1-6 2.jpeg', alt: 'Front view' }
      ],
      isCategoryImage: false
    },
    {
      id: 37,
      category: 'Doors and Windows',
      title: 'Custom Steel Doors',
      description: 'Elegant steel doors with a industrail steel frame, combining modern aesthetics with industrial durability.',
      images: [
        { url: '/gallery-images/CustomMetalDoor1-5 2.jpeg', alt: 'Front view' }
      ],
      isCategoryImage: false
    },
    {
      id: 38,
      category: 'Doors and Windows',
      title: 'Custom Steel Doors',
      description: 'A pair of custom steel doors, featuring a unique design with a custom-welded frame and a rugged industrial edge.',
      images: [
        { url: '/gallery-images/CustomMetalDoor1-4 2.jpeg', alt: 'Front view' }
      ],
      isCategoryImage: false
    },
    {
      id: 39,
      category: 'Behind the Scenes',
      title: 'Industrial Railing Process',
      description: 'A behind the scenes look at the process of creating a custom industrial railing.',
      images: [
        { url: '/gallery-images/IndoorBarnBuildPROCESS1.jpeg', alt: 'Front view' }
      ],
      childImages: [
        { url: '/gallery-images/IndoorBarnBuildPROCESS1-2.jpeg', alt: 'Behind the scenes!' }
      ],
      isCategoryImage: false
    },
    {
      id: 40,
      category: 'Behind the Scenes',
      title: 'Custom Steel Fireplace',
      description: 'A behind the scenes look at the process of creating a custom steel fireplace.',
      images: [
        { url: '/gallery-images/CustomSteelFireplace1-5-PROCESS.jpeg', alt: 'Front view' }
      ],
      isCategoryImage: false
    },
    {
      id: 41,
      category: 'Behind the Scenes',
      title: 'Custom Cutting Process',
      description: 'A peak at the process of creating custom steel sheets.',
      images: [
        { url: '/gallery-images/customsheetpatternprocess1.jpeg', alt: 'Front view' }
      ],
      childImages: [
        { url: '/gallery-images/customsheetpatternprocess1-2.jpeg', alt: 'Behind the scenes!' },
        { url: '/gallery-images/customsheetpatternprocess1-1.jpeg', alt: 'Behind the scenes!' },
      ],
      isCategoryImage: false
    },
    {
      id: 42,
      category: 'Art and Decor',
      title: 'Sleeping Bears',
      description: 'Custom-cut, precision-crafted metal wall decor - Sleeping Bears. ',
      images: [
        { url: '/gallery-images/CustomMetalWallPanels-SleepingBears.jpg', alt: 'Front view' }
      ],
      childImages: [
        { url: '/gallery-images/CustomMetalWallPanels-SleepingBearProcess1.jpg', alt: 'Behind the scenes!' },
        { url: '/gallery-images/CustomMetalWallPanels-SleepingBearProcess2.jpg', alt: 'Behind the scenes!' },
      ],
      isCategoryImage: false
    },
    {
      id: 43,
      category: 'Art and Decor',
      title: 'Gypsy Soul',
      description: 'A precision-cut metal wall piece ~ Gypsy Soul.',
      images: [
        { url: '/gallery-images/CustomMetalArt3-GypseySoul.jpg', alt: 'Front view' }
      ],
      isCategoryImage: false
    },
    {
      id: 44,
      category: 'Art and Decor',
      title: 'The Oaks - Custom Signage',
      description: 'Handcrafted custom metal signage for The Oaks',
      images: [
        { url: '/gallery-images/CustomMetalSign-TheOaks1.jpg', alt: 'Front view' }
      ],
      childImages: [
        { url: '/gallery-images/CustomMetalSign-TheOaks1-1.jpg', alt: 'Close-up of the metal signage' },
        { url: '/gallery-images/CustomMetalSign-TheOaks1-2.jpg', alt: 'Close-up of the metal signage' },
        { url: '/gallery-images/CustomMetalSign-TheOaksProcess.jpg', alt: 'Behind the scenes!' },
      ],
      isCategoryImage: false
    },
    {
      id: 46,
      category: 'Custom Furniture',
      title: 'Custom-Built Dining Set',
      description: 'A custom-built dining set with a modern industrial design, featuring a custom-welded frame and a rugged industrial edge.',
      images: [
        { url: '/gallery-images/CustomDiningSet-WithBench.jpg', alt: 'An awesome, custom dining table and bench dining set, with a modern industrial design.' }
      ],
      isCategoryImage: false
    }, 
    {
      id: 47,
      category: 'Custom Furniture',
      title: 'Live-Edge Custom Shelving',
      description: 'A custom-built dining set with a modern industrial design, featuring a custom-welded frame and a rugged industrial edge.',  
      images: [
        { url: '/gallery-images/CustomShelves-LiveEdge1.jpg', alt: 'An awesome, custom dining table and bench dining set, with a modern industrial design.' },
      ],
      childImages: [
        { url: '/gallery-images/CustomShelves-LiveEdge2.jpg', alt: 'Second view of the custom shelving' },
      ],
      isCategoryImage: false
    },
    {
      id: 48,
      category: 'Custom Projects',
      title: 'Custom Kitchen Build',
      description: 'Custom hot-rolled patina added to the modern industrial steel kitchen.',
      images: [
        { url: '/gallery-images/CustomIndoor-KitchenBuild 2.jpeg', alt: 'A stylish, modern kitchen with sleek steel accents and gorgeous countertops.' },
      ],
      isCategoryImage: false
    },
    {
      id: 49,
      category: 'Doors and Windows',
      title: 'Modern Steel Entry Door',
      description: 'A contemporary steel entry door featuring clean lines and minimalist design, perfect for modern homes.',
      images: [
        { url: '/gallery-images/custom-metal-door1.jpg', alt: 'Modern steel entry door with sleek design and premium finish.' },
      ],
      isCategoryImage: false
    },
    {
      id: 50,
      category: 'Doors and Windows',
      title: 'Industrial Pivot Door',
      description: 'A statement pivot door crafted from blackened steel with custom hardware, creating a bold entrance for any space.',
      images: [
        { url: '/gallery-images/custom-metal-door2.jpg', alt: 'Heavy-duty industrial pivot door with custom blackened steel finish.' },
      ],
      isCategoryImage: false
    },
    {
      id: 51,
      category: 'Doors and Windows',
      title: 'Rustic Steel French Doors',
      description: 'Handcrafted steel French doors combining rustic charm with industrial strength, perfect for indoor-outdoor living spaces.',
      images: [
        { url: '/gallery-images/custom-metal-door3.jpg', alt: 'Pair of rustic steel French doors with glass panels and custom hardware.' },
      ],
      isCategoryImage: false
    },
    {
      id: 52,
      category: 'Doors and Windows',
      title: 'Custom Steel Door Frame',
      description: 'Precision-crafted steel door frames designed to enhance both traditional and contemporary architectural styles.',
      images: [
        { url: '/gallery-images/custom-metal-door4.jpg', alt: 'Custom fabricated steel door frames with clean welds and durable finish.' },
      ],
      isCategoryImage: false
    },
    {
      id: 53,
      category: 'Doors and Windows',
      title: 'Steel and Glass Pocket Door',
      description: 'A space-saving steel and glass pocket door that slides seamlessly into the wall, combining functionality with industrial elegance.',
      images: [
        { url: '/gallery-images/custom-metal-door5.jpg', alt: 'Steel-framed glass pocket door with custom track system and hardware.' },
      ],
      isCategoryImage: false
    },
    {
      id: 54,
      category: 'Doors and Windows',
      title: 'Patina Steel Bi-fold Doors',
      description: 'Custom bi-fold doors with a distinctive patina finish, creating a striking visual element while maximizing open space.',
      images: [
        { url: '/gallery-images/custom-metal-door6.jpg', alt: 'Patina-finished steel bi-fold doors with custom hardware and installation.' },
      ],
      isCategoryImage: false
    },
    {
      id: 55,
      category: 'Doors and Windows',
      title: 'Heavy-Duty Security Door',
      description: 'A fortress-like steel security door that doesn\'t compromise on style, featuring custom metalwork and reinforced construction.',
      images: [
        { url: '/gallery-images/custom-metal-door7.jpg', alt: 'Heavy-duty steel security door with decorative elements and premium locking system.' },
      ],
      isCategoryImage: false
    },
    {
      id: 56,
      category: 'Doors and Windows',
      title: 'Handforged Steel Door',
      description: 'A stunning handforged steel door with a custom patina finish, creating a striking visual element while maximizing open space.',
      images: [
        { url: '/gallery-images/custom-metal-door8.jpg', alt: 'Handforged steel door with custom patina finish.' },
      ],
      isCategoryImage: false
    },
    {
      id: 57,
      category: 'Doors and Windows',
      title: 'Arched Steel Door Frame',
      description: 'A custom-built arched steel door frame adding architectural interest to both interior and exterior doorways.',
      images: [
        { url: '/gallery-images/custom-metal-door9.jpg', alt: 'Arched steel door frame with precision craftsmanship and elegant curves.' },
      ],
      isCategoryImage: false
    },
    {
      id: 58,
      category: 'Doors and Windows',
      title: 'Custom Metal Door',
      description: 'A unique custom metal door with a custom patina finish, creating a striking visual element while maximizing open space.',
      images: [
        { url: '/gallery-images/custom-metal-door10.jpg', alt: 'Custom metal door with custom patina finish.' },
      ],
      isCategoryImage: false
    },
    {
      id: 59,
      category: 'Doors and Windows',
      title: 'Handforged Custom Metal Door',
      description: 'A unique handforged custom metal door with a custom patina finish, creating a striking visual element while maximizing open space.',
      images: [
        { url: '/gallery-images/custom-metal-door11.jpg', alt: 'Handforged custom metal door with custom patina finish.' },
      ],
      isCategoryImage: false
    },
    {
      id: 60,
      category: 'Doors and Windows',
      title: 'Steel-Framed Barn Door',
      description: 'A modern interpretation of the classic barn door with a robust steel frame and custom sliding hardware system.',
      images: [
        { url: '/gallery-images/custom-metal-door12.jpg', alt: 'Steel-framed barn door with custom track system and industrial aesthetic.' },
      ],
      isCategoryImage: false
    }
  ]
</file>

<file path="src/hooks/use-mobile.tsx">
import * as React from "react"
const MOBILE_BREAKPOINT = 768
export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)
  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])
  return !!isMobile
}
</file>

<file path="src/lib/utils.ts">
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="src/pages/404.tsx">
import { useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
/**
 * 404 Page Component
 * Automatically redirects to home page after mounting
 */
export default function NotFound() {
  const navigate = useNavigate();
  useEffect(() => {
    // Redirect to home page immediately
    navigate('/', { replace: true });
  }, [navigate]);
  // This won't be visible since we redirect immediately,
  // but it's good practice to return something
  return (
    <div className="min-h-screen flex items-center justify-center">
      <h1>Redirecting to home...</h1>
    </div>
  );
}
</file>

<file path="src/pages/CategoryShowcase.tsx">
import React from 'react';
import { galleryItems } from '@/data/gallery-items';
import { Link } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Home } from 'lucide-react';
const categories = [
  'Railings, Fences, and Gates',
  'Custom Furniture',
  'Commercial',
  'Art and Decor',
  'Doors and Windows',
  'Behind the Scenes',
  'Custom Projects'
];
const CategoryShowcase = () => {
  return (
    <div className="min-h-screen relative">
      {/* Floating Home Button */}
      <div className="fixed top-8 left-8 z-50">
        <Link to="/">
          <Button variant="outline" className="flex items-center gap-2">
            <Home className="h-4 w-4" />
            Home
          </Button>
        </Link>
      </div>
      <div className="pt-20 pb-10">
        {categories.map((category) => {
          const sectionId = category.toLowerCase().replace(/[, ]/g, '-');
          const items = galleryItems.filter(item => item.category === category).slice(0, 5); // select up to 5 projects per category
          if (items.length === 0) return null;
          return (
            <section key={category} className="my-12 px-4">
              <div className="flex justify-between items-center mb-4">
                <h2 className="text-2xl font-bold">{category}</h2>
                <Link to={`/galleries#${sectionId}`} className="text-blue-500 hover:underline">
                  View All
                </Link>
              </div>
              <div className="overflow-hidden">
                <div className="marquee-container">
                  <div className="marquee-content flex space-x-8">
                    {items.map(item => (
                      <div key={item.id} className="min-w-[16rem] relative">
                        {/* Project Image */}
                        <img 
                          src={item.images[0].url} 
                          alt={item.images[0].alt} 
                          className="w-full h-auto object-cover rounded-md shadow-md"
                        />
                        {/* Overlay project title on the image for enhanced UX/UI */}
                        <p className="absolute inset-0 flex items-center justify-center text-white text-2xl font-bold drop-shadow-lg">
                          {item.title}
                        </p>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </section>
          );
        })}
      </div>
    </div>
  );
};
export default CategoryShowcase;
</file>

<file path="src/pages/Contact.tsx">
import { useState } from 'react';
import { Mail, Phone, MapPin, Clock } from 'lucide-react';
import { motion } from 'framer-motion';
const Contact = () => {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    phone: '',
    projectType: '',
    message: ''
  });
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    console.log(formData);
  };
  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
  };
  return (
    <div className="min-h-screen bg-gradient-to-b from-charcoal/80 to-charcoal/60">
      {/* Header Section */}
      <div className="bg-surface/50">
        <div className="max-w-7xl mx-auto px-4 py-16 md:py-20">
          <motion.div
            initial={{ y: 20, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{ duration: 0.5 }}
          >
            <div className="relative">
              <h1 className="text-4xl md:text-6xl font-bold text-center mb-6 bg-clip-text text-transparent bg-gradient-to-r from-white via-orange-400 to-orange-600 animate-ember-pulse relative z-10 py-2">
                Contact Us
              </h1>
              <div 
                className="absolute inset-x-0 mx-auto w-full max-w-xs bg-red-600 opacity-50 blur-lg animate-pulse z-0"
                aria-hidden="true"
              />
              <div 
                className="absolute inset-x-0 mx-auto w-full max-w-xs bg-heading-shine bg-[length:400%_100%] animate-shine opacity-70 z-0"
                style={{
                  backgroundSize: '200% 100%',
                  mixBlendMode: 'overlay'
                }}
                aria-hidden="true"
              />
            </div>
            <p className="text-xl text-center text-text-body max-w-3xl mx-auto">
              Got an idea brewing? I'm here to help make it a reality. Let's chat and start crafting something amazing just for you.
            </p>
          </motion.div>
        </div>
      </div>
      <div className="max-w-7xl mx-auto px-4 py-12">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-12">
          {/* Contact Form */}
          <div className="bg-card p-8 rounded-lg">
            <h2 className="text-2xl font-semibold mb-6">Drop Me a Line</h2>
            <form onSubmit={handleSubmit} className="space-y-6">
              <div>
                <label className="block text-sm font-medium mb-2">Name</label>
                <input
                  type="text"
                  name="name"
                  value={formData.name}
                  onChange={handleChange}
                  className="w-full px-4 py-2 bg-muted rounded-md"
                  placeholder="Your Full Name"
                  required
                />
              </div>
              <div>
                <label className="block text-sm font-medium mb-2">Email</label>
                <input
                  type="email"
                  name="email"
                  value={formData.email}
                  onChange={handleChange}
                  className="w-full px-4 py-2 bg-muted rounded-md"
                  placeholder="Your Email Address"
                  required
                />
              </div>
              <div>
                <label className="block text-sm font-medium mb-2">Phone</label>
                <input
                  type="tel"
                  name="phone"
                  value={formData.phone}
                  onChange={handleChange}
                  className="w-full px-4 py-2 bg-muted rounded-md"
                  placeholder="Your Phone Number (optional)"
                />
              </div>
              <div>
                <label className="block text-sm font-medium mb-2">Project Type</label>
                <select
                  name="projectType"
                  value={formData.projectType}
                  onChange={handleChange}
                  className="w-full px-4 py-2 bg-muted rounded-md"
                  required
                >
                  <option value="">Select a project type</option>
                  <option value="railing">I have an Outdoor Project</option>
                  <option value="furniture">I have an Indoor Project</option>
                  <option value="commercial">Something Special</option>
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium mb-2">Message</label>
                <textarea
                  name="message"
                  value={formData.message}
                  onChange={handleChange}
                  rows={4}
                  className="w-full px-4 py-2 bg-muted rounded-md"
                  placeholder="Tell me about your project here! Helpful details would be: "
                  required
                />
              </div>
              <button
                type="submit"
                className="w-full px-6 py-3 metallic-gradient text-cream rounded-md 
                hover:opacity-90 transition-opacity"
              >
                Send Message
              </button>
            </form>
          </div>
          {/* Contact Information */}
          <div className="space-y-8">
            <div>
              <h2 className="text-2xl font-semibold mb-6">Contact Information</h2>
              <div className="space-y-4">
                <div className="flex items-center space-x-4">
                  <Mail className="text-bronze" />
                  <span>mattcoffeydesign@gmail.com</span>
                </div>
                <div className="flex items-center space-x-4">
                  <Phone className="text-bronze" />
                  <span>+1 (231) 645-0622</span>
                </div>
                <div className="flex items-center space-x-4">
                  <MapPin className="text-bronze" />
                  <span>Traverse City, MI</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};
export default Contact;
</file>

<file path="src/pages/Discover.tsx">
import { useMemo } from 'react';
import { GalleryGrid } from '@/components/gallery/GalleryGrid';
import { galleryItems } from '@/data/gallery-items';
import { motion } from 'framer-motion';
import { Link } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Home } from 'lucide-react';
/**
 * Discover Page Component
 * 
 * Displays a full-screen gallery grid with an automatic, infinite scrolling column,
 * a background logo, and a floating home button.
 */
const Discover = () => {
  // No filtering, show all items
  const items = useMemo(() => galleryItems, []);
  return (
    <>
      {/* Centered Background Logo */}
      <div className="fixed top-8 left-1/2 -translate-x-1/2 z-0">
        <img 
          src="/MattCoffeyDesignLOGO.jpg" 
          alt="Matt Coffey Design" 
          className="w-48 h-auto opacity-30 brightness-[2] contrast-[1.2]"
        />
      </div>
      {/* Floating Home Button */}
      <motion.div 
        className="fixed top-[40px] left-8 z-50"
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, delay: 0.2 }}
      >
        <motion.div
          whileHover={{ scale: 1.02, x: -2 }}
          whileTap={{ scale: 0.98 }}
        >
          <Link to="/">
            <Button 
              variant="outline" 
              className="bg-zinc-900/90 backdrop-blur-sm border-zinc-800 hover:bg-zinc-800/90 text-zinc-200 flex items-center gap-2 pl-3 pr-4 text-sm font-light"
            >
              <Home className="h-4 w-4" />
              <span>Back to Home</span>
            </Button>
          </Link>
        </motion.div>
      </motion.div>
      {/* Gallery Grid Container */}
      {/* Using overflow-visible to prevent clipping of the auto-scrolling column */}
      <div className="relative w-screen min-h-screen overflow-visible">
        <GalleryGrid items={items} />
      </div>
    </>
  );
};
export default Discover;
</file>

<file path="src/pages/Galleries.tsx">
import React, { useState, useEffect, useLayoutEffect, useRef } from 'react';
import { galleryItems, GalleryItem } from '@/data/gallery-items';
import { Link, useLocation } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { ChevronLeft, ChevronRight, X } from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';
import { DetailView } from '@/components/gallery/DetailView';
import { cn } from '@/lib/utils';
const categories = [
  'Railings, Fences, and Gates',
  'Custom Furniture',
  'Commercial',
  'Art and Decor',
  'Doors and Windows',
  'Behind the Scenes',
  'Custom Projects'
];
// Category descriptions - you may want to move these to a data file
const categoryDescriptions = {
  'Railings, Fences, and Gates': 'Explore my collection of hand-crafted metal railings, fences, and gates. Each piece combines safety with stunning artistry and functionality, is custom-made through a process of design, cutting, and welding, and is designed to last a lifetime.',
  'Custom Furniture': 'Discover unique, custom-designed furniture that blends stylish design, functionality, and decades of experience into one-of-a-kind experiences and pieces.',
  'Commercial': 'View a select few of my commercial projects where I work with businesses to create custom metalwork solutions for their spaces.',
  'Art and Decor': 'Browse my artistic metalwork and decorative pieces that add character to any space.',
  'Doors and Windows': 'See my custom doors and windows that provide both security and aesthetic appeal.',
  'Behind the Scenes': 'Get a glimpse into my workshop and see how I bring these pieces to life.',
  'Custom Projects': 'Explore my diverse range of custom projects tailored to unique client needs.'
};
const ImageCarousel = ({ images }: { images: GalleryItem[] }) => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [direction, setDirection] = useState(0);
  const [selectedItem, setSelectedItem] = useState<GalleryItem | null>(null);
  const [isFullscreen, setIsFullscreen] = useState(false);
  const scrollPositionRef = useRef(0);
  // Add effect to handle body scroll lock
  useLayoutEffect(() => {
    if (selectedItem) {
      // Save the current scroll position
      scrollPositionRef.current = window.scrollY;
      document.body.style.position = 'fixed';
      document.body.style.top = `-${scrollPositionRef.current}px`;
      document.body.style.width = '100%';
      document.body.style.overflow = 'hidden';
    } else {
      // Restore body styles
      document.body.style.overflow = '';
      document.body.style.position = '';
      document.body.style.top = '';
      document.body.style.width = '';
      // Restore the scroll position
      window.scrollTo(0, scrollPositionRef.current);
    }
    return () => {
      document.body.style.overflow = '';
      document.body.style.position = '';
      document.body.style.top = '';
      document.body.style.width = '';
      document.body.style.height = '';
    };
  }, [selectedItem]);
  // Handle escape key for exiting fullscreen and modal
  useEffect(() => {
    const handleEscape = (e: KeyboardEvent) => {
      if (e.key === 'Escape') {
        if (isFullscreen) {
          setIsFullscreen(false);
        } else if (selectedItem) {
          setSelectedItem(null);
        }
      }
    };
    window.addEventListener('keydown', handleEscape);
    return () => window.removeEventListener('keydown', handleEscape);
  }, [isFullscreen, selectedItem]);
  if (!images.length) {
    return (
      <div className="w-full h-[300px] md:h-[400px] flex items-center justify-center">
        <p className="text-gray-400">No images available</p>
      </div>
    );
  }
  if (images.length === 1) {
    return (
      <div className="w-full h-[300px] md:h-[400px] flex items-center justify-center">
        <div 
          className="w-full max-w-[500px] h-[300px] md:h-[400px] rounded-lg overflow-hidden shadow-2xl cursor-pointer"
          onClick={() => setSelectedItem(images[0])}
        >
          <img
            src={images[0].images[0].url}
            alt={images[0].images[0].alt}
            className="w-full h-full object-cover"
          />
        </div>
      </div>
    );
  }
  const previousIndex = (currentIndex - 1 + images.length) % images.length;
  const nextIndex = (currentIndex + 1) % images.length;
  const slideVariants = {
    enter: (direction: number) => ({
      x: direction > 0 ? 500 : -500,
      opacity: 0,
      scale: 0.9,
    }),
    center: {
      x: 0,
      opacity: 1,
      scale: 1,
    },
    exit: (direction: number) => ({
      x: direction < 0 ? 500 : -500,
      opacity: 0,
      scale: 0.9,
    }),
  };
  const swipeConfidenceThreshold = 10000;
  const swipePower = (offset: number, velocity: number) => {
    return Math.abs(offset) * velocity;
  };
  const paginate = (newDirection: number) => {
    setDirection(newDirection);
    setCurrentIndex((prevIndex) => (newDirection > 0 ? nextIndex : previousIndex));
  };
  return (
    <>
      <div className="relative w-full h-[300px] md:h-[400px] flex items-center justify-center">
        {/* Previous Image - Hide on mobile */}
        <motion.div 
          className="absolute left-4 z-0 hidden md:block"
          animate={{ opacity: 0.5, scale: 0.75 }}
          transition={{ duration: 0.3 }}
        >
          <div className="w-[200px] md:w-[300px] h-[200px] md:h-[300px] rounded-lg overflow-hidden">
            <img
              src={images[previousIndex].images[0].url}
              alt={images[previousIndex].images[0].alt}
              className="w-full h-full object-cover"
            />
          </div>
        </motion.div>
        {/* Current Image */}
        <AnimatePresence initial={false} custom={direction} mode="wait">
          <motion.div
            key={currentIndex}
            custom={direction}
            variants={slideVariants}
            initial="enter"
            animate="center"
            exit="exit"
            transition={{
              x: { type: "spring", stiffness: 300, damping: 30 },
              opacity: { duration: 0.2 },
              scale: { duration: 0.2 }
            }}
            drag="x"
            dragConstraints={{ left: 0, right: 0 }}
            dragElastic={1}
            onDragEnd={(e, { offset, velocity }) => {
              const swipe = swipePower(offset.x, velocity.x);
              if (swipe < -swipeConfidenceThreshold) {
                paginate(1);
              } else if (swipe > swipeConfidenceThreshold) {
                paginate(-1);
              }
            }}
            className="z-10 px-4 md:px-0"
          >
            <motion.div 
              className="w-full md:w-[500px] h-[300px] md:h-[400px] rounded-lg overflow-hidden shadow-2xl cursor-pointer"
              whileHover={{ scale: 1.02 }}
              onClick={() => setSelectedItem(images[currentIndex])}
            >
              <img
                src={images[currentIndex].images[0].url}
                alt={images[currentIndex].images[0].alt}
                className="w-full h-full object-cover"
              />
            </motion.div>
          </motion.div>
        </AnimatePresence>
        {/* Next Image - Hide on mobile */}
        <motion.div 
          className="absolute right-4 z-0 hidden md:block"
          animate={{ opacity: 0.5, scale: 0.75 }}
          transition={{ duration: 0.3 }}
        >
          <div className="w-[200px] md:w-[300px] h-[200px] md:h-[300px] rounded-lg overflow-hidden">
            <img
              src={images[nextIndex].images[0].url}
              alt={images[nextIndex].images[0].alt}
              className="w-full h-full object-cover"
            />
          </div>
        </motion.div>
        {/* Navigation Buttons */}
        <motion.button
          className="absolute left-2 md:left-8 z-20 bg-white/10 hover:bg-white/20 rounded-full p-2 backdrop-blur-sm"
          onClick={() => paginate(-1)}
          whileHover={{ scale: 1.1 }}
          whileTap={{ scale: 0.9 }}
        >
          <ChevronLeft className="w-4 h-4 md:w-6 md:h-6 text-white" />
        </motion.button>
        <motion.button
          className="absolute right-2 md:right-8 z-20 bg-white/10 hover:bg-white/20 rounded-full p-2 backdrop-blur-sm"
          onClick={() => paginate(1)}
          whileHover={{ scale: 1.1 }}
          whileTap={{ scale: 0.9 }}
        >
          <ChevronRight className="w-4 h-4 md:w-6 md:h-6 text-white" />
        </motion.button>
      </div>
      {/* Detail View Modal */}
      {selectedItem && (
        <AnimatePresence>
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ 
              duration: 0.3,
              ease: "easeInOut"
            }}
            className={cn(
              "fixed z-[100] flex items-center justify-center bg-black/80 backdrop-blur-sm",
              isFullscreen ? "inset-0" : "inset-4"
            )}
            style={{ 
              position: 'fixed',
              overflow: 'hidden'
            }}
            onClick={(e) => {
              if (e.target === e.currentTarget) {
                if (isFullscreen) {
                  setIsFullscreen(false);
                } else {
                  setSelectedItem(null);
                }
              }
            }}
          >
            <motion.div 
              className={cn(
                "relative",
                isFullscreen ? "w-screen h-screen" : "w-[550px] h-[440px] md:w-[660px] md:h-[550px]"
              )}
              initial={isFullscreen ? { scale: 0.8 } : { scale: 0.9, y: 20 }}
              animate={isFullscreen ? { scale: 1 } : { scale: 1, y: 0 }}
              exit={isFullscreen ? { scale: 0.8 } : { scale: 0.9, y: 20 }}
              transition={{
                type: "spring",
                stiffness: 250,
                damping: 25,
                mass: 0.5
              }}
              layout
            >
              <motion.button
                className="absolute top-6 right-6 z-50 bg-white/10 hover:bg-white/20 rounded-full p-2"
                onClick={(e) => {
                  e.stopPropagation();
                  if (isFullscreen) {
                    setIsFullscreen(false);
                  } else {
                    setSelectedItem(null);
                  }
                }}
              >
                <X className="w-4 h-4 text-white" />
              </motion.button>
              <DetailView 
                item={selectedItem}
              />
            </motion.div>
          </motion.div>
        </AnimatePresence>
      )}
    </>
  );
};
const CategorySection = ({ category, items, isEven }: { category: string; items: GalleryItem[]; isEven: boolean }) => {
  // Create a URL-friendly ID from the category name
  const sectionId = category.toLowerCase().replace(/[,\s]+/g, '-');
  return (
    <motion.div
      id={sectionId}
      initial={{ opacity: 0, y: 50 }}
      whileInView={{ opacity: 1, y: 0 }}
      viewport={{ once: true }}
      transition={{ duration: 0.6, ease: "easeOut" }}
      className={cn(
        "w-full py-12 md:py-24",
        isEven ? "bg-neutral-950" : "bg-black"
      )}
    >
      <div className="container px-4 mx-auto">
        <motion.div 
          initial={{ opacity: 0, x: isEven ? 50 : -50 }}
          whileInView={{ opacity: 1, x: 0 }}
          viewport={{ once: true }}
          transition={{ duration: 0.6, delay: 0.2, ease: "easeOut" }}
          className="mb-8"
        >
          <h2 className="text-3xl md:text-4xl font-bold text-white mb-4">{category}</h2>
          <p className="text-neutral-400 max-w-2xl">
            {categoryDescriptions[category as keyof typeof categoryDescriptions]}
          </p>
        </motion.div>
        <ImageCarousel images={items} />
      </div>
    </motion.div>
  );
};
const Galleries = () => {
  const [isLoading, setIsLoading] = useState(true);
  const location = useLocation();
  useEffect(() => {
    window.history.scrollRestoration = 'manual';
    window.scrollTo(0, 0);
  }, [location.pathname]);
  useEffect(() => {
    // Simulate loading of resources
    const timer = setTimeout(() => {
      setIsLoading(false);
    }, 500);
    return () => clearTimeout(timer);
  }, []);
  useEffect(() => {
    if (!isLoading && location.hash) {
      const timer = setTimeout(() => {
        const sectionId = decodeURIComponent(location.hash.slice(1));
        const element = document.getElementById(sectionId);
        if (element) {
          const offset = 80; // adjust to your header height
          const elementPosition = element.getBoundingClientRect().top;
          const offsetPosition = elementPosition + window.pageYOffset - offset;
          window.scrollTo({ top: offsetPosition, behavior: 'smooth' });
        }
      }, 800); // delay to allow animations to finish
      return () => clearTimeout(timer);
    }
  }, [isLoading, location.hash]);
  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      transition={{ duration: 0.5 }}
      className="min-h-screen bg-black"
    >
      <AnimatePresence>
        {isLoading ? (
          <motion.div
            key="loader"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black flex items-center justify-center z-50"
          >
            <motion.div
              animate={{ 
                scale: [1, 1.2, 1],
                opacity: [1, 0.8, 1]
              }}
              transition={{
                duration: 1.5,
                repeat: Infinity,
                ease: "easeInOut"
              }}
              className="w-12 h-12 rounded-full border-2 border-neutral-800 border-t-white animate-spin"
            />
          </motion.div>
        ) : (
          <>
            <motion.div
              key="content"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, delay: 0.2 }}
            >
              {categories.map((category, index) => {
                const categoryItems = galleryItems.filter(
                  (item) => item.category === category
                );
                return (
                  <CategorySection
                    key={category}
                    category={category}
                    items={categoryItems}
                    isEven={index % 2 === 0}
                  />
                );
              })}
            </motion.div>
          </>
        )}
      </AnimatePresence>
    </motion.div>
  );
};
export default Galleries;
</file>

<file path="src/pages/Index.tsx">
import { HeroSection } from '@/components/home/HeroSection';
import { Testimonials } from '@/components/home/Testimonials';
import { CTASection } from '@/components/home/CTASection';
import { InstagramFeed } from '@/components/home/InstagramFeed';
import { AboutSection } from '@/components/home/AboutSection';
import MetalworkCarousel from '@/components/MetalworkCarousel';
const Index = () => {
  return (
    <div className="min-h-screen px-4">
      <HeroSection />
      <div className="max-w-[1400px] mx-auto">
        <div className="space-y-24 mb-24">
          <MetalworkCarousel />
          <AboutSection />
          <Testimonials />
        </div>
        <InstagramFeed />
        <CTASection />
      </div>
    </div>
  );
};
export default Index;
</file>

<file path="src/styles/global.css">
/* Global Styles for Metal Artistry Haven
 * This file imports and sets up global styles for the application
 */
/* Import Typography System */
@import './typography.css';
/* Reset default margins and padding */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}
/* Set base font size on html for rem units */
html {
  font-size: 16px; /* This makes 1rem = 16px */
}
/* Ensure body uses our defined body text size */
body {
  font-size: var(--font-size-body);
  line-height: 1.5;
}
</file>

<file path="src/styles/typography.css">
/* Typography Scale
 * This file defines the typography scale for the Metal Artistry Haven website.
 * The scale follows a modular type system for consistent visual hierarchy.
 */
:root {
  /* Heading Sizes */
  --font-size-h1: 48px;  /* Primary headings, hero text */
  --font-size-h2: 36px;  /* Section headings */
  --font-size-h3: 28px;  /* Subsection headings */
  --font-size-h4: 22px;  /* Card headings, smaller section titles */
  /* Body Text */
  --font-size-body: 16px;  /* Main body text */
  /* Supporting Text */
  --font-size-caption: 12px;  /* Captions, metadata, supplementary text */
}
/* Base Typography Classes */
h1, .h1 {
  font-size: var(--font-size-h1);
}
h2, .h2 {
  font-size: var(--font-size-h2);
}
h3, .h3 {
  font-size: var(--font-size-h3);
}
h4, .h4 {
  font-size: var(--font-size-h4);
}
body, .body-text {
  font-size: var(--font-size-body);
}
.caption {
  font-size: var(--font-size-caption);
}
</file>

<file path="src/App.css">
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}
.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}
@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}
.card {
  padding: 2em;
}
.read-the-docs {
  color: #888;
}
</file>

<file path="src/App.tsx">
import { Suspense, lazy } from "react";
import { BrowserRouter, Routes, Route, useLocation } from "react-router-dom";
import { AnimatePresence } from "framer-motion";
import Navigation from "./components/Navigation";
import Footer from "./components/ui/Footer";
import { cn } from "@/lib/utils";
import { PageTransition } from "./components/PageTransition";
// Lazy load page components
const Index = lazy(() => import("./pages/Index"));
const Discover = lazy(() => import("./pages/Discover"));
const Contact = lazy(() => import("./pages/Contact"));
const NotFound = lazy(() => import("./pages/404"));
const Galleries = lazy(() => import("./pages/Galleries"));
const AppContent = () => {
  const location = useLocation();
  const isDiscoverPage = location.pathname === '/discover';
  return (
    <div className={cn("min-h-screen flex flex-col", {
      "bg-zinc-950": isDiscoverPage
    })}>
      {!isDiscoverPage && <Navigation />}
      <main className={cn("flex-grow", {
        "h-screen": isDiscoverPage
      })}>
        <Suspense fallback={<div className="flex items-center justify-center h-full">Loading...</div>}>
          <AnimatePresence mode="wait">
            <PageTransition key={location.pathname}>
              <Routes location={location}>
                <Route path="/" element={<Index />} />
                <Route path="/discover" element={<Discover />} />
                <Route path="/contact" element={<Contact />} />
                <Route path="/galleries" element={<Galleries />} />
                <Route path="*" element={<NotFound />} />
              </Routes>
            </PageTransition>
          </AnimatePresence>
        </Suspense>
      </main>
      {!isDiscoverPage && <Footer />}
    </div>
  );
};
const App = () => (
  <BrowserRouter>
    <AppContent />
  </BrowserRouter>
);
export default App;
</file>

<file path="src/index.css">
@import url('https://fonts.googleapis.com/css2?family=Railway:wght@300;400;500;600;700&display=swap');
@tailwind base;
@tailwind components;
@tailwind utilities;
/* Primary color scheme variables */
:root {
  /* Primary Colors */
  --color-charcoal: #121212;
  --color-graphite: #2E2E2E;
  /* Accent Colors */
  --color-red-hot: #FF4500;
  --color-molten-silver: #A8A9AD;
  /* Secondary Colors */
  --color-burnt-ember: #8B0000;
  --color-ash-grey: #696969;
  --background: 0 0% 0%;
  --foreground: 0 0% 100%;
  --card: 0 0% 8%;
  --card-foreground: 0 0% 100%;
  --popover: 0 0% 8%;
  --popover-foreground: 0 0% 100%;
  --primary: 0 0% 90%;
  --primary-foreground: 0 0% 8%;
  --secondary: 12 80% 55%;
  --secondary-foreground: 0 0% 100%;
  --muted: 0 0% 15%;
  --muted-foreground: 0 0% 70%;
  --accent: 12 80% 55%;
  --accent-foreground: 0 0% 100%;
  --destructive: 0 62.8% 30.6%;
  --destructive-foreground: 0 0% 100%;
  --border: 0 0% 20%;
  --input: 0 0% 15%;
  --ring: 12 80% 55%;
  --radius: 0.5rem;
}
@layer base {
  body {
    font-family: 'Railway', sans-serif;
  }
  * {
    @apply border-border;
  }
  body {
    @apply text-foreground;
    background-color: var(--color-charcoal);
    color: var(--color-ash-grey);
    position: relative;
    overflow-x: hidden;
  }
  body::before {
    content: '';
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, 
      var(--color-charcoal) 0%,
      var(--color-graphite) 50%,
      var(--color-charcoal) 100%
    );
    z-index: -1;
    pointer-events: none;
  }
  section {
    position: relative;
    z-index: 1;
  }
  h1, h2, h3, h4, h5, h6 {
    font-family: 'Cinzel', serif;
    background: none;
    color: white !important;
  }
}
/* Testimonial card styles */
@layer components {
  .testimonial-card {
    @apply flex-shrink-0 w-[200px] p-3 sm:w-[300px] sm:p-5 md:w-[350px] md:p-6 lg:w-[400px] lg:p-8;
    border: 1px solid rgba(168, 169, 173, 0.1);
    border-radius: 0.5rem;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
    backdrop-filter: blur(12px);
    background: linear-gradient(135deg, 
      rgba(176, 196, 222, 0.4) 0%,
      rgba(119, 136, 153, 0.35) 30%,
      rgba(46, 46, 46, 0.98) 100%
    );
    box-shadow: 
      0 0 30px rgba(176, 196, 222, 0.2),
      0 -2px 15px rgba(176, 196, 222, 0.15),
      inset 0 0 50px rgba(176, 196, 222, 0.1);
    overflow: hidden;
    border-image: linear-gradient(to right, rgba(255, 69, 0, 0.5), rgba(255, 160, 0, 0.5));
    border-image-slice: 1;
  }
}
.testimonial-card::before {
  content: '';
  position: absolute;
  top: -2px;
  left: 5%;
  right: 5%;
  height: 3px;
  background: linear-gradient(
    90deg,
    transparent,
    rgba(255, 160, 0, 0.2) 20%,
    rgba(255, 200, 0, 0.4) 30%,
    rgba(255, 230, 150, 0.8) 50%,
    rgba(255, 200, 0, 0.4) 70%,
    rgba(255, 160, 0, 0.2) 80%,
    transparent
  );
  filter: blur(1px);
  opacity: 0.7;
  transition: all 0.3s ease;
}
/* Add metallic variations */
.testimonial-card:nth-child(3n+1) {
  background: linear-gradient(135deg, 
    rgba(176, 196, 222, 0.4) 0%,
    rgba(119, 136, 153, 0.35) 30%,
    rgba(46, 46, 46, 0.98) 100%
  );
  box-shadow: 
    0 0 30px rgba(176, 196, 222, 0.2),
    0 -2px 15px rgba(176, 196, 222, 0.15),
    inset 0 0 50px rgba(176, 196, 222, 0.1);
}
.testimonial-card:nth-child(3n+2) {
  background: linear-gradient(135deg, 
    rgba(205, 127, 50, 0.4) 0%,
    rgba(184, 115, 51, 0.35) 30%,
    rgba(46, 46, 46, 0.98) 100%
  );
  box-shadow: 
    0 0 30px rgba(205, 127, 50, 0.2),
    0 -2px 15px rgba(205, 127, 50, 0.15),
    inset 0 0 50px rgba(205, 127, 50, 0.1);
}
.testimonial-card:nth-child(3n) {
  background: linear-gradient(135deg, 
    rgba(144, 175, 144, 0.4) 0%,
    rgba(128, 155, 128, 0.35) 30%,
    rgba(46, 46, 46, 0.98) 100%
  );
  box-shadow: 
    0 0 30px rgba(144, 175, 144, 0.2),
    0 -2px 15px rgba(144, 175, 144, 0.15),
    inset 0 0 50px rgba(144, 175, 144, 0.1);
}
.testimonial-card:hover {
  transform: translateY(-4px);
  border-color: rgba(176, 196, 222, 0.5);
}
/* Enhance hover effects for each variation */
.testimonial-card:nth-child(3n+1):hover {
  background: linear-gradient(135deg, 
    rgba(176, 196, 222, 0.5) 0%,
    rgba(119, 136, 153, 0.45) 30%,
    rgba(46, 46, 46, 0.98) 100%
  );
  box-shadow: 
    0 6px 30px -8px rgba(176, 196, 222, 0.3),
    0 0 40px rgba(176, 196, 222, 0.25),
    0 -4px 25px rgba(176, 196, 222, 0.2),
    inset 0 0 60px rgba(176, 196, 222, 0.15);
}
.testimonial-card:nth-child(3n+2):hover {
  background: linear-gradient(135deg, 
    rgba(205, 127, 50, 0.5) 0%,
    rgba(184, 115, 51, 0.45) 30%,
    rgba(46, 46, 46, 0.98) 100%
  );
  box-shadow: 
    0 6px 30px -8px rgba(205, 127, 50, 0.3),
    0 0 40px rgba(205, 127, 50, 0.25),
    0 -4px 25px rgba(205, 127, 50, 0.2),
    inset 0 0 60px rgba(205, 127, 50, 0.15);
}
.testimonial-card:nth-child(3n):hover {
  background: linear-gradient(135deg, 
    rgba(144, 175, 144, 0.5) 0%,
    rgba(128, 155, 128, 0.45) 30%,
    rgba(46, 46, 46, 0.98) 100%
  );
  box-shadow: 
    0 6px 30px -8px rgba(144, 175, 144, 0.3),
    0 0 40px rgba(144, 175, 144, 0.25),
    0 -4px 25px rgba(144, 175, 144, 0.2),
    inset 0 0 60px rgba(144, 175, 144, 0.15);
}
.testimonial-card:hover::before {
  opacity: 1;
  filter: blur(2px);
  background: linear-gradient(
    90deg,
    transparent,
    rgba(255, 160, 0, 0.3) 10%,
    rgba(255, 200, 0, 0.5) 20%,
    rgba(255, 230, 150, 1) 50%,
    rgba(255, 200, 0, 0.5) 80%,
    rgba(255, 160, 0, 0.3) 90%,
    transparent
  );
  box-shadow: 
    0 0 10px rgba(255, 230, 150, 0.5),
    0 0 20px rgba(255, 160, 0, 0.3);
}
.testimonial-card::after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  border-radius: inherit;
  background: linear-gradient(135deg, transparent 0%, rgba(255, 69, 0, 0.1) 100%);
  pointer-events: none;
  opacity: 0;
  transition: opacity 0.3s ease;
}
.testimonial-card:hover::after {
  opacity: 1;
}
/* Marquee animations */
@layer components {
  .marquee-container {
    @apply w-full overflow-hidden relative py-3 sm:py-4 md:py-6 lg:py-8;
  }
}
.marquee-content {
  display: flex;
  animation: scroll 40s linear infinite;
  gap: 2rem;
  width: max-content;
}
.marquee-content-reverse {
  display: flex;
  animation: scroll-reverse 45s linear infinite;
  gap: 2rem;
  width: max-content;
}
@keyframes scroll {
  0% { transform: translateX(0); }
  100% { transform: translateX(-50%); }
}
@keyframes scroll-reverse {
  0% { transform: translateX(-50%); }
  100% { transform: translateX(0); }
}
/* Text styles */
.text-molten-silver {
  color: var(--color-molten-silver);
}
.text-red-hot {
  color: var(--color-red-hot);
}
.text-ash-grey {
  color: var(--color-ash-grey);
}
</file>

<file path="src/main.tsx">
import { createRoot } from 'react-dom/client'
import App from './App.tsx'
import './index.css'
createRoot(document.getElementById("root")!).render(<App />);
</file>

<file path="src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path=".gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="clean-unused-images.js">
#!/usr/bin/env node
import fs from 'fs';
import path from 'path';
import { globSync } from 'glob';
// Use the current working directory (project root)
const projectRoot = process.cwd();
// Use "--dry-run" so you can see what files would be deleted before actually removing them.
const dryRun = process.argv.includes('--dry-run');
console.log(`Running clean-unused-images script in ${dryRun ? 'dry run' : 'delete'} mode.`);
// Define the file patterns to search for image references in our codebase.
// This covers JavaScript, TypeScript, JSX, TSX, and HTML files.
const codeFilePatterns = [
  '**/*.js',
  '**/*.jsx',
  '**/*.ts',
  '**/*.tsx',
  '**/*.html',
];
// Exclude common folders that don't contain references (like node_modules, dist, and gallery-images).
const codeFiles = codeFilePatterns.flatMap(pattern =>
  globSync(pattern, {
    cwd: projectRoot,
    ignore: ['node_modules/**', 'dist/**', 'gallery-images/**']
  }).map(filename => path.join(projectRoot, filename))
);
let referencesContent = '';
// Read the content of every code file so we can search for image file usage.
codeFiles.forEach(file => {
  try {
    const content = fs.readFileSync(file, 'utf-8');
    referencesContent += content;
  } catch (err) {
    console.error(`Error reading file ${file}: ${err}`);
  }
});
console.log(`Scanned ${codeFiles.length} code files for image references.`);
// Specify the directories that contain the images to check.
// For images under "gallery-images" we assume they are referenced in code as "/gallery-images/<filename>".
// For "dist" we just check for the file's name.
const directoriesToCheck = [
  { folder: 'gallery-images', refPrefix: '/gallery-images/' },
  { folder: 'dist', refPrefix: '' }
];
directoriesToCheck.forEach(({ folder, refPrefix }) => {
  const dirPath = path.join(projectRoot, folder);
  if (!fs.existsSync(dirPath)) {
    console.warn(`Directory ${dirPath} does not exist. Skipping.`);
    return;
  }
  // List all files (recursively) in the folder.
  const files = globSync('**/*.*', { cwd: dirPath });
  files.forEach(file => {
    // Create a full relative reference that we expect to appear in the code.
    // (On Windows, we replace backslashes with forward slashes.)
    const fullRelativePath = refPrefix ? refPrefix + file.replace(/\\/g, '/') : file;
    // Also grab just the base file name as a fallback.
    const baseName = path.basename(file);
    // If our combined code content does NOT include the expected reference, we consider it unused.
    if (referencesContent.includes(fullRelativePath) || referencesContent.includes(baseName)) {
      console.log(`Keeping: ${path.join(dirPath, file)} (in use)`);
    } else {
      const filePath = path.join(dirPath, file);
      console.log(`Unused found: ${filePath}`);
      if (!dryRun) {
        try {
          fs.unlinkSync(filePath);
          console.log(`Deleted: ${filePath}`);
        } catch (err) {
          console.error(`Error deleting file ${filePath}: ${err}`);
        }
      }
    }
  });
});
console.log("Clean-up completed.");
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/index.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  }
}
</file>

<file path="eslint.config.js">
import js from "@eslint/js";
import globals from "globals";
import reactHooks from "eslint-plugin-react-hooks";
import reactRefresh from "eslint-plugin-react-refresh";
import tseslint from "typescript-eslint";
export default tseslint.config(
  { ignores: ["dist"] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ["**/*.{ts,tsx}"],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      "react-hooks": reactHooks,
      "react-refresh": reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      "react-refresh/only-export-components": [
        "warn",
        { allowConstantExport: true },
      ],
      "@typescript-eslint/no-unused-vars": "off",
    },
  }
);
</file>

<file path="index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>MattCoffeyDesign</title>
    <meta name="description" content="MattCoffeyDesign - High-End, Custom Metalworking Blacksmithing" />
    <meta name="author" content="Will Spurlock" />
    <meta property="og:image" content="MattCoffeyDesignMetalworking.jpg" />
    <meta property="og:title" content="MattCoffeyDesign" />
    <meta property="og:description" content="High-End, Custom Metalworking Blacksmithing" />
    <meta property="og:type" content="website" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Railway:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
      * {
        font-family: 'Railway', sans-serif;
      }
    </style>
    <script async defer src="https://www.instagram.com/embed.js"></script>
  </head>
  <body>
    <div id="root"></div>
    <script src="https://cdn.gpteng.co/gptengineer.js" type="module"></script>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="netlify.toml">
[build]
  command = "npm run build"
  publish = "dist"

[[redirects]]
  # Redirect all 404s to home page
  from = "/*"
  to = "/index.html"
  status = 200

[build.environment]
  NODE_VERSION = "20"
</file>

<file path="package.json">
{
  "name": "vite_react_shadcn_ts",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "build:dev": "vite build --mode development",
    "lint": "eslint .",
    "preview": "vite preview",
    "generate-images": "node scripts/generate-responsive-images.js"
  },
  "dependencies": {
    "@radix-ui/react-alert-dialog": "^1.1.1",
    "@radix-ui/react-dialog": "^1.1.2",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-select": "^2.1.1",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slider": "^1.2.0",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-switch": "^1.1.0",
    "@radix-ui/react-toast": "^1.2.1",
    "@radix-ui/react-toggle": "^1.1.0",
    "@radix-ui/react-toggle-group": "^1.1.0",
    "@radix-ui/react-tooltip": "^1.1.4",
    "@tanstack/react-query": "^5.56.2",
    "caniuse-lite": "^1.0.30001698",
    "chrome-launcher": "^1.1.2",
    "class-variance-authority": "^0.7.1",
    "classnames": "^2.5.1",
    "clsx": "^2.1.1",
    "date-fns": "^3.6.0",
    "embla-carousel-react": "^8.3.0",
    "framer-motion": "^11.18.0",
    "glob": "^11.0.1",
    "lighthouse": "^12.3.0",
    "lucide-react": "^0.462.0",
    "next-themes": "^0.3.0",
    "node.js": "^0.0.1-security",
    "react": "^18.3.1",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^6.26.2",
    "sonner": "^1.5.0",
    "tailwind-merge": "^2.5.2",
    "tailwindcss-animate": "^1.0.7",
    "yargs": "^17.7.2"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.0",
    "@tailwindcss/typography": "^0.5.15",
    "@types/node": "^22.5.5",
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react-swc": "^3.5.0",
    "autoprefixer": "^10.4.20",
    "cursor-tools": "latest",
    "eslint": "^9.9.0",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.9",
    "globals": "^15.9.0",
    "lint-staged": "^15.1.0",
    "postcss": "^8.4.47",
    "prettier": "^3.1.0",
    "rollup-plugin-visualizer": "^5.14.0",
    "sharp": "^0.33.5",
    "tailwindcss": "^3.4.11",
    "tsx": "^4.19.2",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.0.1",
    "vite": "^6.2.2"
  }
}
</file>

<file path="postcss.config.js">
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
</file>

<file path="tailwind.config.ts">
import type { Config } from "tailwindcss";
import animate from "tailwindcss-animate";
export default {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{ts,tsx}",
    "./components/**/*.{ts,tsx}",
    "./app/**/*.{ts,tsx}",
    "./src/**/*.{ts,tsx}",
  ],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      fontFamily: {
        sans: ['Railway', 'sans-serif'],
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
        fadeIn: {
          "0%": { opacity: "0" },
          "100%": { opacity: "1" },
        },
        // Moving shine animation that creates a sweeping highlight effect
        shine: {
          '0%': { 
            backgroundPosition: '200% center',
            opacity: '0'
          },
          '50%': {
            opacity: '0.8'
          },
          '100%': { 
            backgroundPosition: '-200% center',
            opacity: '0'
          },
        },
        // Pulsing ember effect that makes the text appear to glow like hot metal
        'ember-pulse': {
          '0%, 100%': { 
            textShadow: '0 0 30px rgba(251,191,36,0.8), 0 0 50px rgba(245,158,11,0.6), 0 0 70px rgba(245,158,11,0.4)',
            filter: 'brightness(1.2)'
          },
          '50%': { 
            textShadow: '0 0 20px rgba(251,191,36,0.6), 0 0 35px rgba(245,158,11,0.4), 0 0 50px rgba(245,158,11,0.2)',
            filter: 'brightness(1)'
          },
        },
        'pulse-subtle': {
          '0%, 100%': { 
            opacity: '1',
            boxShadow: '0 0 15px rgba(245,158,11,0.5)'
          },
          '50%': { 
            opacity: '0.95',
            boxShadow: '0 0 25px rgba(245,158,11,0.7)'
          },
        },
        nod: {
          '0%, 100%': { transform: 'rotate(0deg)' },
          '50%': { transform: 'rotate(2deg)' },
        },
        shimmer: {
          '0%': { transform: 'translateX(0)' },
          '100%': { transform: 'translateX(400%)' }
        }
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
        fadeIn: "fadeIn 0.5s ease-in-out",
        shine: 'shine 4s ease-in-out infinite',
        'pulse-subtle': 'pulse-subtle 3s ease-in-out infinite',
        'ember-pulse': 'ember-pulse 2s ease-in-out infinite',
        nod: 'nod 2s ease-in-out infinite',
        shimmer: 'shimmer 2s linear infinite',
      },
      colors: {
        // Primary Colors
        'charcoal': '#121212',
        'graphite': '#2E2E2E',
        'steel': {
          900: '#1a1a1a',
          800: '#2d2d2d',
          700: '#404040',
          600: '#525252',
          500: '#666666',
          400: '#808080'
        },
        // Accent Colors
        'red-hot': '#FF4500',
        'molten-silver': '#A8A9AD',
        // Secondary Colors
        'burnt-ember': '#8B0000',
        'ash-grey': '#696969',
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      backgroundImage: {
        // Metallic gradient that transitions smoothly through amber tones
        'metal-gradient': 'linear-gradient(135deg, transparent 0%, #f59e0b 35%, #fbbf24 50%, #f59e0b 65%, transparent 100%)',
        // Subtle shine effect that animates across the text
        'heading-shine': 'linear-gradient(90deg, transparent 0%, rgba(251,191,36,0.4) 50%, transparent 100%)',
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
    },
  },
  plugins: [
    animate
  ],
} satisfies Config;
</file>

<file path="tsconfig.app.json">
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": false,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noImplicitAny": false,
    "noFallthroughCasesInSwitch": false,

    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["src"]
}
</file>

<file path="tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ],
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    },
    "noImplicitAny": false,
    "noUnusedParameters": false,
    "skipLibCheck": true,
    "allowJs": true,
    "noUnusedLocals": false,
    "strictNullChecks": false
  }
}
</file>

<file path="tsconfig.node.json">
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="vite.config.ts">
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react-swc";
import path from "path";
export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  }
});
</file>

</files>
