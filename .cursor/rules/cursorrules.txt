# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note *most* the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Lighthouse_Reports

You can use the `lighthouse_runner.js` file to generate a Lighthouse report for a requested URL.

For a local URL, you can run the following command:
```bash
    node tools/lighthouse_runner.js --url "http://localhost:3000" --output report.json
```

For a public URL, you can run the following command:
```bash
    node tools/lighthouse_runner.js --url "https://example.com"
```

NOTE: THIS IS A .JS FILE, NOT A PYTHON FILE.
This script will launch Chrome in headless mode, run Lighthouse against the specified URL, output the key scores to the console, and save the full JSON report if you specify the --output flag.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- When I say "etc", I mean it, and I want you to generate more examples. 
- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities

# Scratchpad

## Task: Completely Redefine the Display Method for Specialty Product Categories

### Explanation:
The current display for specialty product categories is being reimagined to offer an innovative, sleek, and stylish experience for visitors. The new design will:
- Display all categories on one page.
- Incorporate smooth scroll effects to showcase images.
- Include interactive pop-ups/modals that reveal detailed information when a user selects a category.
- Ensure the design is responsive and visually consistent with the current brand guidelines.

### Plan & Steps:
[ ] **Research & Inspiration**
    - Look at examples of modern, interactive category pages.
    - Gather inspiration on scroll effects (parallax, horizontal scrolling, fade-in effects) and modal/pop-up presentations.
    - **Testing**: Verify that the inspirations align with our design criteria before moving on.

[ ] **Define Layout & User Flow**
    - Sketch a layout for the page.
    - Decide on a grid or a horizontal scroll section for each category.
    - Consider "hero" banners for each category that animate into view with scroll.
    - **Testing**: Review layout sketches and user flow diagrams with the team and validate them prior to implementation.

[ ] **Design Components**
    - Create a reusable Category Card component:
        - Displays a background image and overlay text for the category.
        - On hover, shows subtle animations indicating interactivity.
    - Develop a full-screen Modal/Pop-up component using Radix UI or Framer Motion:
        - The modal pops up when a category card is clicked.
        - Displays basic product information and additional images for that category.
    - Incorporate scroll effects:
        - Use Framer Motion to animate cards as they come into view.
        - Explore parallax or smooth fade-in transitions.
    - **Testing**: Write unit tests for each component and manually verify UI interactions.

[ ] **Integration with Data**
    - Refactor or create a data module for specialty categories (if separate from galleryItems) with:
        - Category name, description, primary image, and childImages. 
    - Validate that the data maps correctly to the UI components.
    - **Testing**: Create sample data and run integration tests to ensure accurate mapping and rendering.

[ ] **Implement the Page**
    - Create a new React page (e.g., `src/pages/SpecialtyCategories.tsx`) that lays out all category cards.
    - Optimize for one-page viewing with a combination of vertical scrolling and horizontal scrolling where needed.
    - **Testing**: Conduct both automated and manual end-to-end testing on functionality and design responsiveness.

[ ] **Enhance with Advanced Effects**
    - Implement scroll-triggered animations using Framer Motion hooks.
    - Add a sticky navigation or scroll indicator (if needed) to guide the user through categories.
    - **Testing**: Test animations extensively to verify smooth transitions and check for any performance issues.

[ ] **Responsive & Accessible Design**
    - Ensure that scroll effects and modals work correctly on all device sizes.
    - Validate accessibility through proper keyboard navigation for modals and semantic HTML markup.
    - **Testing**: Run accessibility audits using tools like Lighthouse or Axe and test on multiple devices (this is a user task).

[ ] **Final Testing & Debugging**
    - Test all interactions (scroll, hover, modal open/close) on multiple devices.
    - Use the Scratchpad to update lessons with any fixes or improvements.
    - **Testing**: Execute comprehensive end-to-end tests on a staging environment before moving to production.

### Reference to cursorrules.txt:
- **Workflow & Progress:** Follow the instructions in this file for documenting progress. Update with todo markers as tasks are completed.
- **Lessons Learned:** Any issues or improvements should be added to the Lessons section of the file for future reference.